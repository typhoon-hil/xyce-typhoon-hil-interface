//
// Saved by sw version: 2020.2
// Save timestamp: 27-Jul-2020 @ 05:13:45 PM
//

library "xyce_lib" {
    configuration {
        hil_device = "HIL402"
        hil_configuration_id = 1
        simulation_method = exact
        simulation_time_step = auto
        simulation_discret_scaling = 1.0
        dsp_timer_periods = 100e-6, 50e-3
        ss_calc_method = "systematic elimination"
        enb_pole_shift = True
        enb_gds_oversampling = True
        show_modes = False
        device_ao_limit_enable = False
        cpl_stb = False
        enb_dep_sw_detect = False
        code_section = "internal memory"
        data_section = "internal memory"
        sys_sp_rate_1 = 0.0001
        sys_sp_rate_2 = 0.05
        sys_real_type_precision = "default"
        user_real_type_precision = "default"
        sys_cpu_optimization = "high"
        user_cpu_optimization = "high"
        user_cpu_part_option = "default"
        matrix_based_reduction = True
        cpl_dynamics_analysis = False
        cce_use_relative_names = False
        cce_type_mapping_real = "double"
        cce_type_mapping_uint = "unsigned int"
        cce_type_mapping_int = "int"
        cce_directory = ""
        cce_custom_type_int = ""
        cce_custom_type_uint = ""
        cce_custom_type_real = ""
    }

    component Subsystem Root {
        component Category Switches {
            layout = dynamic
            component Subsystem "Current-Controlled Switch" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                port n_node {
                    label = "-"
                    position = right center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                port p_node {
                    label = "+"
                    position = left center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                connect p_node "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" n_node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Current-Controlled Switch</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">In Xyce, this is an \"W\" type component.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">With an Active-High logic selected, the switch remains closed (is modeled as an R_on resistor) if the current on the selected controlling measurement is positive. When open, the switch is modeled as an R_off resistor.</p></body></html>"

                    r_on {
                        label = "ON Resistance"
                        widget = edit
                        type = generic
                        default_value = "1e-3"
                    }

                    r_off {
                        label = "OFF Resistance"
                        widget = edit
                        type = generic
                        default_value = "1e6"
                    }

                    logic {
                        label = "Logic"
                        widget = combo
                        combo_values = "Active High", "Active Low"
                        type = string
                        default_value = "Active High"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    ctrl_name {
                        label = "Controlling measurement name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    update_currents {
                        label = "Update current measurements"
                        widget = button
                        type = string
                        default_value = "Update"
                        no_evaluate

                        CODE button_clicked
                            update_current_measurements()
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/cc_switch_high.svg')
                        ctrl_name_prop = mdl.prop(item_handle, "ctrl_name")
                        ctrl_name = mdl.get_property_value(ctrl_name_prop)

                        try:

                            logic = mdl.prop(item_handle, "logic")

                            if mdl.get_property_value(logic) == "Active Low":
                                if not ctrl_name == "None":
                                    mdl.set_component_icon_image(item_handle, 'Xyce/cc_switch_low_selectedcur.svg')
                                    mdl.set_color(item_handle, "blue")
                                    mdl.disp_component_icon_text(item_handle, " " + ctrl_name, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                                else:
                                    mdl.set_component_icon_image(item_handle, 'Xyce/cc_switch_low.svg')
                            else:
                                if not ctrl_name == "None":
                                   mdl.set_component_icon_image(item_handle, 'Xyce/cc_switch_high_selectedcur.svg')
                                   mdl.set_color(item_handle, "blue")
                                   mdl.disp_component_icon_text(item_handle, " " + ctrl_name, relpos_x = 0.5, relpos_y = 0.87, size = 8)

                        except: pass
                    ENDCODE

                    CODE init
                        def update_current_measurements():
                            i_list = []

                            for item in mdl.get_items():
                                try: # Not every component has a type
                                    if mdl.get_component_type_name(item) == "Current Measurement":
                                        i_list.append(item.fqn.split(".")[0])
                                except AttributeError: pass

                            for item in mdl.get_items():
                                try: # Not every component has a type
                                    if mdl.get_component_type_name(item) == "Current-Controlled Switch":
                                        ctrl_name_prop = mdl.prop(item, "ctrl_name")
                                        mdl.set_property_combo_values(ctrl_name_prop, i_list)
                                        displayed_ctrl = mdl.get_property_disp_value(ctrl_name_prop)
                                        if displayed_ctrl not in i_list:
                                            mdl.set_property_value(ctrl_name_prop, "None")
                                            mdl.refresh_icon(item)
                                except AttributeError: pass

                        update_current_measurements()
                    ENDCODE
                }
            }
            [
                position = 7616, 7944
                size = 64, 64
            ]

            component Subsystem "Voltage-Controlled Switch" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7904, 7992
                ]

                port p_node {
                    label = "+"
                    position = left center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port n_node {
                    label = "-"
                    position = right center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                port p_ctrl {
                    label = "Ctrl+"
                    position = 0.0, -26.0
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port n_ctrl {
                    label = "Ctrl-"
                    position = -20.0, -26.0
                    kind = pe
                }
                [
                    position = 8040, 7992
                    hide_name = True
                    scale = -1, 1
                ]

                connect p_node "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" n_node as Connection2
                connect p_ctrl "Short Circuit1.p_node" as Connection3
                connect "Short Circuit1.n_node" n_ctrl as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Voltage-Controlled Switch</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">In Xyce, this is an \"S\" type component.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">With an Active-High logic selected, the switch remains closed (is modeled as an R_on resistor) while a positive differential voltage is measured between the + and - terminals. When open, the switch is modeled as an R_off resistor.</p></body></html>"

                    r_on {
                        label = "ON Resistance"
                        widget = edit
                        type = generic
                        default_value = "1e-3"
                    }

                    r_off {
                        label = "OFF Resistance"
                        widget = edit
                        type = generic
                        default_value = "1e6"
                    }

                    logic {
                        label = "Logic"
                        widget = combo
                        combo_values = "Active High", "Active Low"
                        type = string
                        default_value = "Active High"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/vc_switch_high.svg')

                        try:
                            logic = mdl.prop(item_handle, "logic")

                            if mdl.get_property_value(logic) == "Active Low":
                                mdl.set_component_icon_image(item_handle, 'Xyce/vc_switch_low.svg')
                        except: pass
                    ENDCODE
                }
            }
            [
                position = 7440, 7944
                size = 64, 64
            ]

            component Subsystem MESFET {
                layout = static
                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                port src {
                    label = "S"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port gate {
                    label = "G"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port drain {
                    label = "D"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect "Short Circuit.n_node" Junction1 as Connection3
                connect src "Short Circuit.p_node" as Connection1
                connect "Short Circuit 2.n_node" Junction1 as Connection6
                connect gate "Short Circuit 2.p_node" as Connection5
                connect Junction1 drain as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Metal-Semiconductor Field Effect Transistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"Z\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re

                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)

                            def parse_file(self):
                                choose_file = QFileDialog()

                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')


                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False


                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 3-pin MESFETs
                                num_pins = 3
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                nmf_models = re.compile(r"^\.MODEL ([\S]*)\s+NMF", flags = re.I)
                                pmf_models = re.compile(r"^\.MODEL ([\S]*)\s+PMF", flags = re.I)
                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            nmf_match = re.match(nmf_models, line)
                                            if nmf_match:
                                                model_name = nmf_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                pmf_match = re.match(pmf_models, line)
                                                if pmf_match:
                                                    model_name = pmf_match.group(1)
                                                    model_list.append(model_name)
                                                else:
                                                    sub_match = re.match(sub_based, line)
                                                    if sub_match:
                                                        if len(sub_match.group(2).split()) == num_pins:
                                                            model_name = sub_match.group(1)
                                                            subcircuit_model_list.append(model_name)
                                                        in_sub_flag  = True
                                        else:
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False

                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)

                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()

                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins

                        mdl.set_component_icon_image(item_handle, 'Xyce/mesfet_nchannel.svg')

                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)

                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.65, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.65, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins

                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7680, 8168
                rotation = right
                size = 64, 64
            ]

            component Subsystem BJT {
                layout = static
                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                port col {
                    label = "C"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port base {
                    label = "B"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port emit {
                    label = "E"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect "Short Circuit.n_node" Junction1 as Connection3
                connect col "Short Circuit.p_node" as Connection1
                connect "Short Circuit 2.n_node" Junction1 as Connection6
                connect base "Short Circuit 2.p_node" as Connection5
                connect Junction1 emit as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Bipolar Junction Transistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"Q\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re

                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)

                            def parse_file(self):
                                choose_file = QFileDialog()

                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')

                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False

                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 3-pin BJTs (No temperature terminals)
                                num_pins = 3
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([\sA-z0-9_]+)[\s]+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                npn_models = re.compile(r"^\.MODEL ([\S]*)\s+NPN", flags = re.I)
                                pnp_models = re.compile(r"^\.MODEL ([\S]*)\s+PNP", flags = re.I)
                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            npn_match = re.match(npn_models, line)
                                            if npn_match:
                                                model_name = npn_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                pnp_match = re.match(pnp_models, line)
                                                if pnp_match:
                                                    model_name = pnp_match.group(1)
                                                    model_list.append(model_name)
                                                else:
                                                    sub_match = re.match(sub_based, line)
                                                    if sub_match:
                                                        if len(sub_match.group(2).split()) == num_pins:
                                                            model_name = sub_match.group(1)
                                                            subcircuit_model_list.append(model_name)
                                                        in_sub_flag  = True
                                        else:
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False

                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)

                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()

                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins

                        mdl.set_component_icon_image(item_handle, 'Xyce/bjt_npn.svg')

                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)

                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.85, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.85, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins

                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7800, 8168
                rotation = right
                size = 64, 64
            ]

            component Subsystem JFET {
                layout = static
                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                port src {
                    label = "S"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port gate {
                    label = "G"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port drain {
                    label = "D"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect "Short Circuit.n_node" Junction1 as Connection3
                connect src "Short Circuit.p_node" as Connection1
                connect "Short Circuit 2.n_node" Junction1 as Connection6
                connect gate "Short Circuit 2.p_node" as Connection5
                connect Junction1 drain as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Junction Field Effect Transistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"J\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re

                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)

                            def parse_file(self):
                                choose_file = QFileDialog()

                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')

                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False

                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 3-pin JFETs
                                num_pins = 3
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                njf_models = re.compile(r"^\.MODEL ([\S]*)\s+NJF",flags = re.I)
                                pjf_models = re.compile(r"^\.MODEL ([\S]*)\s+PJF",flags = re.I)
                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            njf_match = re.match(njf_models, line)
                                            if njf_match:
                                                model_name = njf_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                pjf_match = re.match(pjf_models, line)
                                                if pjf_match:
                                                    model_name = pjf_match.group(1)
                                                    model_list.append(model_name)
                                                else:
                                                    sub_match = re.match(sub_based, line)
                                                    if sub_match:
                                                        if len(sub_match.group(2).split()) == num_pins:
                                                            model_name = sub_match.group(1)
                                                            subcircuit_model_list.append(model_name)
                                                        in_sub_flag  = True
                                        else:
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False

                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)

                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()

                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins

                        mdl.set_component_icon_image(item_handle, 'Xyce/jfet_nchannel.svg')

                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)

                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.65, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.65, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins

                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7552, 8168
                rotation = right
                size = 64, 64
            ]

            component Subsystem MOSFET {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                port gate {
                    label = "G"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port src {
                    label = "S"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port drain {
                    label = "D"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect src "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" Junction1 as Connection3
                connect Junction1 drain as Connection4
                connect gate "Short Circuit 2.p_node" as Connection5
                connect "Short Circuit 2.n_node" Junction1 as Connection6

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Metal-Oxide-Semiconductor Field Effect Transistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"M\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re

                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)

                            def parse_file(self):
                                choose_file = QFileDialog()

                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')

                                if file:
                                    self.parse_models(file)


                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 3-pin MOSFETs (No temperature terminals)
                                num_pins = 3
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                nmos_models = re.compile(r"^\.MODEL ([\S]*)\s+NMOS",flags = re.I)
                                pmos_models = re.compile(r"^\.MODEL ([\S]*)\s+PMOS",flags = re.I)

                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            nmos_match = re.match(nmos_models, line)
                                            if nmos_match:
                                                model_name = nmos_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                pmos_match = re.match(pmos_models, line)
                                                if pmos_match:
                                                    model_name = pmos_match.group(1)
                                                    model_list.append(model_name)
                                                else:
                                                    sub_match = re.match(sub_based, line)
                                                    if sub_match:
                                                        if len(sub_match.group(2).split()) == num_pins:
                                                            model_name = sub_match.group(1)
                                                            subcircuit_model_list.append(model_name)
                                                        in_sub_flag  = True
                                        else:
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False

                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)

                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()

                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins

                        mdl.set_component_icon_image(item_handle, 'Xyce/mosfet_nmos.svg')

                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)

                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.9, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.9, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins

                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7432, 8168
                rotation = right
                size = 64, 64
            ]

            component Subsystem Diode {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7880, 8040
                    rotation = down
                ]

                port p_node {
                    label = "+"
                    position = right center
                    kind = pe
                }
                [
                    position = 8000, 8040
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    label = "-"
                    position = left center
                    kind = pe
                }
                [
                    position = 7776, 8040
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.n_node" n_node as Connection2
                connect p_node "Short Circuit.p_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Diode</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"D\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re

                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)

                            def parse_file(self):
                                choose_file = QFileDialog()

                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')

                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False

                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 2-pin diodes
                                num_pins = 2
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                diode_models = re.compile(r"^\.MODEL ([.\S]*)\s+(?:D|d)", flags = re.I)
                                # Models should not be added if inside a subcircuit definition

                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            diode_match = re.match(diode_models, line)
                                            if diode_match:
                                                model_name = diode_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                sub_match = re.match(sub_based, line)
                                                if sub_match:
                                                    if len(sub_match.group(2).split()) == num_pins:
                                                        model_name = sub_match.group(1)
                                                        subcircuit_model_list.append(model_name)
                                                    in_sub_flag  = True
                                        else:
                                            # Detect end of the subcircuit and update flag
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False

                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)

                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()

                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins

                        mdl.set_component_icon_image(item_handle, 'Xyce/diode.svg')

                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)

                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                 mdl.set_color(item_handle, "blue")
                                 mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.2, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.2, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins

                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7432, 8064
                rotation = right
                size = 64, 64
            ]

            component Subsystem "Ideal Diode" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7880, 8040
                    rotation = down
                ]

                port p_node {
                    label = "+"
                    position = right center
                    kind = pe
                }
                [
                    position = 8000, 8040
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    label = "-"
                    position = left center
                    kind = pe
                }
                [
                    position = 7776, 8040
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.n_node" n_node as Connection2
                connect p_node "Short Circuit.p_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Diode.</p></body></html>"

                    r_on {
                        label = "Conduction resistance"
                        widget = edit
                        type = generic
                        default_value = "1e-4"
                        unit = "Ω"
                    }

                    vd_on {
                        label = "Forward voltage drop"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE define_icon
                        import builtins

                        mdl.set_component_icon_image(item_handle, 'Xyce/diode.svg')
                    ENDCODE

                    CODE pre_compile
                    ENDCODE
                }
            }
            [
                position = 7048, 8000
                rotation = right
                size = 64, 64
            ]

            component Subsystem "Unidirectional Switch" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7888, 8064
                ]

                component el_short "Short Circuit 2" {
                }
                [
                    position = 7888, 7992
                ]

                port gate {
                    label = "G"
                    position = top center
                    kind = pe
                }
                [
                    position = 7768, 7992
                    hide_name = True
                ]

                port src {
                    label = "S"
                    position = right center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port drain {
                    label = "D"
                    position = left center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                junction Junction1 pe
                [
                    position = 7952, 8064
                ]

                connect src "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" Junction1 as Connection3
                connect Junction1 drain as Connection4
                connect gate "Short Circuit 2.p_node" as Connection5
                connect "Short Circuit 2.n_node" Junction1 as Connection6

                r_on = "1e-4"

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Unidirectional Switch Model.</p></body></html>"

                    r_on {
                        label = "Conduction resistance"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "Ω"
                    }

                    vd_on {
                        label = "Diode voltage drop"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "V"
                    }

                    vsw_on {
                        label = "Switch voltage drop"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                    ENDCODE

                    CODE define_icon
                        import builtins

                        mdl.set_component_icon_image(item_handle, 'Xyce/mosfet_nmos.svg')
                    ENDCODE

                    CODE pre_compile
                    ENDCODE
                }
            }
            [
                position = 7048, 8120
                rotation = right
                size = 64, 64
            ]
        }
        [
            position = 8320, 8016
            size = 96, 96
        ]

        component Category "Passive Elements" {
            layout = dynamic
            component Subsystem "Ideal Inductor" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7912, 8088
                    rotation = down
                ]

                port p_node {
                    position = right center
                    kind = pe
                }
                [
                    position = 8048, 8088
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    position = left center
                    kind = pe
                }
                [
                    position = 7800, 8088
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.p_node" p_node as Connection2
                connect n_node "Short Circuit.n_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Inductor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"L\" type element with only the IC parameter.</p></body></html>"

                    L {
                        label = "Inductance"
                        widget = edit
                        type = generic
                        default_value = "10e-6"
                        unit = "H"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE

                        CODE property_value_edited
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    IC {
                        label = "Initial Current"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "A"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/inductor.svg')

                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)

                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"

                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)

                        L_prop = mdl.prop(item_handle, "L")

                        L_text, color = get_text(L_prop, "H")

                        if not ignore == True:
                            mdl.set_color(item_handle, color)
                            mdl.disp_component_icon_text(item_handle, L_text, relpos_y = 0.2, size = 8)
                    ENDCODE

                    CODE post_resolve
                        # HEADER START
                        L = mdl.get_property_value(mdl.prop(item_handle, "L"))
                        IC = mdl.get_property_value(mdl.prop(item_handle, "IC"))
                        # HEADER STOP
                        mdl.refresh_icon(item_handle)
                    ENDCODE
                }
            }
            [
                position = 7784, 7904
                size = 64, 64
            ]

            component Subsystem "Ideal Resistor" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                    rotation = down
                ]

                port p_node {
                    label = "+"
                    position = right center
                    kind = pe
                }
                [
                    position = 8008, 8064
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    label = "-"
                    position = left center
                    kind = pe
                }
                [
                    position = 7800, 8064
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.p_node" p_node as Connection2
                connect n_node "Short Circuit.n_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Resistor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"R\" type element.</p></body></html>"

                    R {
                        label = "Resistance"
                        widget = edit
                        type = generic
                        default_value = "100"
                        unit = "Ω"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE

                        CODE property_value_edited
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/resistor.svg')

                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)

                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"

                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)

                        R_prop = mdl.prop(item_handle, "R")
                        R_text, color = get_text(R_prop, "Ω")

                        if not ignore == True:
                            mdl.set_color(item_handle, color)
                            mdl.disp_component_icon_text(item_handle, R_text, relpos_y = 0.2, size = 8)
                    ENDCODE

                    CODE post_resolve
                        # HEADER START
                        R = mdl.get_property_value(mdl.prop(item_handle, "R"))
                        # HEADER STOP
                        mdl.refresh_icon(item_handle)
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7880, 7904
                size = 64, 64
            ]

            component Subsystem Memristor {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7864, 8096
                    rotation = down
                ]

                port p_node {
                    position = right center
                    kind = pe
                }
                [
                    position = 7984, 8096
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    position = left center
                    kind = pe
                }
                [
                    position = 7728, 8096
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect p_node "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" n_node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Memristor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"ymemristor\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A SPICE library file must be loaded and then the desired model selected from the Model Name list.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Subcircuit-based models found in the file may be added to the list. Please note that in this case ANY kind of subcircuit model will be added.</p></body></html>"

                    subc_model {
                        label = "Include subcircuit-based models"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        no_evaluate

                        CODE property_value_edited
                            filename = mdl.get_property_value(mdl.prop(container_handle, "model_path"))
                            if not filename == "-":
                                repeat_parse(mdl, container_handle)
                        ENDCODE
                    }

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = edit
                        type = generic
                        default_value = "-"
                        nonvisible
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re

                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)

                            def parse_file(self):
                                choose_file = QFileDialog()

                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')

                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False

                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 2-pin memristors
                                num_pins = 2
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([\sA-z0-9]+)[\s]+(?:PARAMS)?",
                                                        flags = re.I)
                                # Find individual models
                                memr_models = re.compile(r"^\.MODEL ([.\S]*)\s+MEMRISTOR",
                                                        flags = re.I)
                                # Models should not be added if inside a subcircuit definition
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            memr_match = re.match(memr_models, line)
                                            if memr_match:
                                                model_name = memr_match.group(1)
                                                model_list.append(model_name)
                                            else:
                                                sub_match = re.match(sub_based, line)
                                                if sub_match:
                                                    if len(sub_match.group(2).split()) == num_pins:
                                                        model_name = sub_match.group(1)
                                                        subcircuit_model_list.append(model_name)
                                                    in_sub_flag  = True
                                        else:
                                            # Detect end of the subcircuit and update flag
                                            if re.match(r".ENDS", line):
                                                in_sub_flag = False

                                    if mdl.get_property_disp_value(mdl.prop(item_handle, "subc_model")) == True:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list + subcircuit_model_list)
                                    else:
                                        mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)

                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()

                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        import builtins

                        mdl.set_component_icon_image(item_handle, 'Xyce/memristor.svg')

                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)

                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.80, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.80, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        subc_model = mdl.get_property_value(mdl.prop(item_handle, "subc_model"))
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins

                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7688, 8008
                size = 64, 64
            ]

            component Subsystem "Ideal Capacitor" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                    rotation = down
                ]

                port p_node {
                    position = right center
                    kind = pe
                }
                [
                    position = 8024, 8064
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    position = left center
                    kind = pe
                }
                [
                    position = 7792, 8064
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect n_node "Short Circuit.n_node" as Connection1
                connect "Short Circuit.p_node" p_node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Capacitor</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"C\" type element with only the IC parameter.</p></body></html>"

                    C {
                        label = "Capacitance"
                        widget = edit
                        type = generic
                        default_value = "100e-6"
                        unit = "F"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE

                        CODE property_value_edited
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    IC {
                        label = "Initial Voltage"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/capacitor.svg')

                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)

                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"

                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)

                        C_prop = mdl.prop(item_handle, "C")

                        C_text, color = get_text(C_prop, "F")

                        if not ignore == True:
                            mdl.set_color(item_handle, color)
                            mdl.disp_component_icon_text(item_handle, C_text, relpos_y = 0.12, size = 8)
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE post_resolve
                        # HEADER START
                        C = mdl.get_property_value(mdl.prop(item_handle, "C"))
                        IC = mdl.get_property_value(mdl.prop(item_handle, "IC"))
                        # HEADER STOP
                        mdl.refresh_icon(item_handle)
                    ENDCODE
                }
            }
            [
                position = 7688, 7904
                size = 64, 64
            ]

            component Subsystem Transformer {
                layout = static
                component el_open "Open Circuit1" {
                    circuit_connector = "true"
                }
                [
                    position = 8040, 8200
                ]

                component el_open "Open Circuit2" {
                    circuit_connector = "true"
                }
                [
                    position = 8040, 8296
                ]

                port prm_1 {
                    label = "prm_1"
                    position = left top
                    kind = pe
                }
                [
                    position = 7952, 8200
                ]

                port prm_2 {
                    label = "prm_2"
                    position = left bottom
                    kind = pe
                }
                [
                    position = 7952, 8296
                ]

                port sec_2 {
                    label = "sec_2"
                    position = right bottom
                    kind = pe
                }
                [
                    position = 8128, 8296
                    scale = -1, 1
                ]

                port sec_1 {
                    label = "sec_1"
                    position = right top
                    kind = pe
                }
                [
                    position = 8128, 8200
                    scale = -1, 1
                ]

                connect prm_1 "Open Circuit1.p_node" as Connection1
                connect "Open Circuit1.n_node" sec_1 as Connection2
                connect "Open Circuit2.n_node" sec_2 as Connection3
                connect prm_2 "Open Circuit2.p_node" as Connection4

                mask {
                    icon = "image(\'trl_2w1ph.svg\')"
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Two-winding transformer.</p></body></html>"
                    help_file = "single_phase_two_winding_transformer.html"

                    n1 {
                        label = "Primary turns (N1)"
                        widget = edit
                        type = generic
                        default_value = "1"
                    }

                    n2 {
                        label = "Secondary turns (N2)"
                        widget = edit
                        type = generic
                        default_value = "1"
                    }

                    CODE init
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        image('trl_2w1ph.svg')
                    ENDCODE
                }
            }
            [
                position = 7472, 7960
                size = 124, 256
            ]

            component Subsystem "Coupled Inductor" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7896, 8064
                    rotation = down
                ]

                port n_node {
                    position = left center
                    kind = pe
                }
                [
                    position = 7776, 8064
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                port p_node {
                    position = right center
                    kind = pe
                }
                [
                    position = 8000, 8064
                    rotation = down
                    hide_name = True
                ]

                connect n_node "Short Circuit.n_node" as Connection1
                connect "Short Circuit.p_node" p_node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Coupled Inductor</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">In Xyce, this is a \"K\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component identifies other Coupled Inductor components in the same schematic level.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">You can couple this inductor to another by selecting it on \"New Coupling\", specifying a mutual inductance value and then clicking on \"Add coupling\".</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If this inductor is already coupled to others, you can select one on \"Coupled to\" and update the mutual inductance value or remove the coupling.</p></body></html>"

                    L {
                        label = "Self Inductance"
                        widget = edit
                        type = generic
                        default_value = "1e-04"
                        unit = "H"
                    }

                    IC {
                        label = "Initial Current"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "A"
                    }

                    create_coupling {
                        label = "New coupling"
                        widget = combo
                        combo_values = "No inductors available"
                        type = string
                        default_value = "No inductors available"
                        no_evaluate
                    }

                    coupling_coefficient {
                        label = "Coupling coefficient"
                        widget = edit
                        type = generic
                        default_value = "1"
                    }

                    add {
                        widget = button
                        type = string
                        default_value = "Add coupling"
                        no_evaluate

                        CODE button_clicked
                            add_coupling(container_handle)
                        ENDCODE
                    }

                    select_coupled {
                        label = "Coupled to"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_edited
                            selected_a_coupled_inductor(container_handle)
                        ENDCODE
                    }

                    current_coupling_coefficient {
                        label = "Current coupling coefficient"
                        widget = edit
                        type = generic
                        default_value = "0"

                        CODE property_value_edited
                            edited_current_coupling_box_value(container_handle, new_value)
                        ENDCODE
                    }

                    change {
                        widget = button
                        type = string
                        default_value = "Save new value"
                        no_evaluate

                        CODE button_clicked
                            change_coupling_value(container_handle)
                        ENDCODE
                    }

                    remove {
                        widget = button
                        type = string
                        default_value = "Remove coupling"
                        no_evaluate

                        CODE button_clicked
                            remove_coupling(container_handle)
                        ENDCODE
                    }

                    inductors_dict {
                        label = "Dictionary of Coupled Inductors in this level"
                        widget = combo
                        combo_values = "{}"
                        type = string
                        default_value = "{}"
                        no_evaluate
                        nonvisible
                    }

                    couplings_dict {
                        label = "Existing couplings"
                        widget = combo
                        combo_values = "{}"
                        type = string
                        default_value = "{}"
                        no_evaluate
                        nonvisible
                    }

                    xyce_couplings_dict {
                        label = "Dictionary used by the Xyce converter"
                        widget = combo
                        combo_values = "{}"
                        type = string
                        default_value = "{}"
                        no_evaluate
                        nonvisible
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        import ast

                        def update_all_inductors(item_handle):

                            items = mdl.get_items()

                            ind_count = 0
                            for item in items:
                                try:
                                    if mdl.get_component_type_name(item) == "Coupled Inductor":
                                        ind_count = ind_count + 1
                                except: pass

                            this_ind_mask = item_handle
                            this_ind = mdl.get_parent(this_ind_mask)

                            couplings_dict_prop = mdl.prop(this_ind_mask, "couplings_dict")
                            couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))
                            inductors_dict_prop = mdl.prop(this_ind_mask, "inductors_dict")
                            inductors_dict = ast.literal_eval(mdl.get_property_value(inductors_dict_prop))

                            # When the model is loaded, the fqids change
                            if this_ind.item_fqid not in inductors_dict and len(inductors_dict) == ind_count:
                                # Replace inductors_dict entries
                                new_fqids = {}
                                for ind_fqid in list(inductors_dict):
                                    # Get the handle by the name
                                    ind = mdl.get_item(inductors_dict[ind_fqid])
                                    # user may rename right after opening the model
                                    if ind:
                                        # Set the new fqid for this name
                                        inductors_dict[ind.item_fqid] = inductors_dict.pop(ind_fqid)
                                        new_fqids[ind_fqid] = ind.item_fqid
                                    else:
                                        mdl.info("Current known limitation: cannot rename a Coupled Inductor before double-clicking one of them, after opening a saved model. Please undo the changes or reopen the model.")
                                        raise Exception("Error when updating Coupled Inductors.")

                                # Replace couplings_dict entries
                                for ind_fqid in list(couplings_dict):
                                    coupled_to_dict = couplings_dict[ind_fqid]
                                    for coupled_ind_fqid in list(coupled_to_dict):
                                        new_fqid = new_fqids[coupled_ind_fqid]
                                        if coupled_to_dict.get(coupled_ind_fqid):
                                            coupled_to_dict.update({new_fqid:coupled_to_dict.pop(coupled_ind_fqid)})
                                    couplings_dict[new_fqids[ind_fqid]] = couplings_dict.pop(ind_fqid)

                            # If the model wasn't just loaded
                            else:
                                list_of_inductors = []

                                for item in items:
                                    try:
                                        if mdl.get_component_type_name(item) == "Coupled Inductor":
                                            list_of_inductors.append(item)
                                            inductors_dict.update({item.item_fqid:mdl.get_name(item)})
                                    except: pass
                                # Remove deleted inductors
                                for ind_fqid in list(inductors_dict):
                                    # If that fqid cannot be found in the current list of Coupled Inductor components
                                    if not ind_fqid in [i.item_fqid for i in list_of_inductors]:
                                        inductors_dict.pop(ind_fqid, None)
                                        # Also update the couplings
                                        couplings_dict.pop(ind_fqid, None)
                                        for coupled_to_dict in list(couplings_dict.values()):
                                            coupled_to_dict.pop(ind_fqid, None)

                            # Update dicts of every inductor
                            for item in items:
                                try:
                                    if mdl.get_component_type_name(item) == "Coupled Inductor":
                                        inductors_dict_property = mdl.prop(item, "inductors_dict")
                                        couplings_dict_property = mdl.prop(item, "couplings_dict")
                                        mdl.set_property_combo_values(inductors_dict_property, [str(inductors_dict)])
                                        mdl.set_property_combo_values(couplings_dict_property, [str(couplings_dict)])
                                        # Also must set the property value
                                        mdl.set_property_value(inductors_dict_property, str(inductors_dict))
                                        mdl.set_property_value(couplings_dict_property, str(couplings_dict))
                                        mdl.refresh_icon(item)
                                except: pass

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        update_all_inductors(item_handle)
                        update_display(item_handle)
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        # OPEN
                        # from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog
                        # import ast
                        #
                        # def update_all_inductors(item_handle):
                        #
                        #     items = mdl.get_items()
                        #
                        #     ind_count = 0
                        #     for item in items:
                        #         try:
                        #             if mdl.get_component_type_name(item) == "Coupled Inductor":
                        #                 ind_count = ind_count + 1
                        #         except: pass
                        #
                        #     this_ind_mask = item_handle
                        #     this_ind = mdl.get_parent(this_ind_mask)
                        #
                        #     couplings_dict_prop = mdl.prop(this_ind_mask, "couplings_dict")
                        #     couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))
                        #     inductors_dict_prop = mdl.prop(this_ind_mask, "inductors_dict")
                        #     inductors_dict = ast.literal_eval(mdl.get_property_value(inductors_dict_prop))
                        #
                        #     # When the model is loaded, the fqids change
                        #     if this_ind.item_fqid not in inductors_dict and len(inductors_dict) == ind_count:
                        #         # Replace inductors_dict entries
                        #         new_fqids = {}
                        #         for ind_fqid in list(inductors_dict):
                        #             # Get the handle by the name
                        #             ind = mdl.get_item(inductors_dict[ind_fqid])
                        #             # user may rename right after opening the model
                        #             if ind:
                        #                 # Set the new fqid for this name
                        #                 inductors_dict[ind.item_fqid] = inductors_dict.pop(ind_fqid)
                        #                 new_fqids[ind_fqid] = ind.item_fqid
                        #             else:
                        #                 mdl.info("Current known limitation: cannot rename a Coupled Inductor before double-clicking one of them, after opening a saved model. Please undo the changes or reopen the model.")
                        #                 raise Exception("Error when updating Coupled Inductors.")
                        #
                        #         # Replace couplings_dict entries
                        #         for ind_fqid in list(couplings_dict):
                        #             coupled_to_dict = couplings_dict[ind_fqid]
                        #             for coupled_ind_fqid in list(coupled_to_dict):
                        #                 new_fqid = new_fqids[coupled_ind_fqid]
                        #                 if coupled_to_dict.get(coupled_ind_fqid):
                        #                     coupled_to_dict.update({new_fqid:coupled_to_dict.pop(coupled_ind_fqid)})
                        #             couplings_dict[new_fqids[ind_fqid]] = couplings_dict.pop(ind_fqid)
                        #
                        #     # If the model wasn't just loaded
                        #     else:
                        #         list_of_inductors = []
                        #
                        #         for item in items:
                        #             try:
                        #                 if mdl.get_component_type_name(item) == "Coupled Inductor":
                        #                     list_of_inductors.append(item)
                        #                     inductors_dict.update({item.item_fqid:mdl.get_name(item)})
                        #             except: pass
                        #         # Remove deleted inductors
                        #         for ind_fqid in list(inductors_dict):
                        #             # If that fqid cannot be found in the current list of Coupled Inductor components
                        #             if not ind_fqid in [i.item_fqid for i in list_of_inductors]:
                        #                 inductors_dict.pop(ind_fqid, None)
                        #                 # Also update the couplings
                        #                 couplings_dict.pop(ind_fqid, None)
                        #                 for coupled_to_dict in list(couplings_dict.values()):
                        #                     coupled_to_dict.pop(ind_fqid, None)
                        #
                        #     # Update dicts of every inductor
                        #     for item in items:
                        #         try:
                        #             if mdl.get_component_type_name(item) == "Coupled Inductor":
                        #                 inductors_dict_property = mdl.prop(item, "inductors_dict")
                        #                 couplings_dict_property = mdl.prop(item, "couplings_dict")
                        #                 mdl.set_property_combo_values(inductors_dict_property, [str(inductors_dict)])
                        #                 mdl.set_property_combo_values(couplings_dict_property, [str(couplings_dict)])
                        #                 # Also must set the property value
                        #                 mdl.set_property_value(inductors_dict_property, str(inductors_dict))
                        #                 mdl.set_property_value(couplings_dict_property, str(couplings_dict))
                        #                 mdl.refresh_icon(item)
                        #         except: pass
                        #
                        # dialog = RegularComponentPropertiesDialog(
                        #     component=component,
                        #     property_container=component.masks[-1],
                        #     current_diagram=current_diagram
                        # )
                        # update_all_inductors(item_handle)
                        # update_display(item_handle)
                        # dialog.exec_()
                        import ast

                        def update_display(mask_handle, edited=None):
                            this_ind_mask = mask_handle
                            this_ind = mdl.get_parent(this_ind_mask)
                            # Update the visible part of this inductor's mask
                            # Property handles
                            couplings_dict_prop = mdl.prop(this_ind_mask, "couplings_dict")
                            couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))
                            inductors_dict_prop = mdl.prop(this_ind_mask, "inductors_dict")
                            inductors_dict = ast.literal_eval(mdl.get_property_value(inductors_dict_prop))
                            create_coupling_prop = mdl.prop(this_ind_mask, "create_coupling")
                            coupling_coefficient_prop = mdl.prop(this_ind_mask, "coupling_coefficient")
                            add_prop = mdl.prop(this_ind_mask, "add")
                            select_coupled_prop = mdl.prop(this_ind_mask, "select_coupled")
                            current_coupling_coefficient_prop = mdl.prop(this_ind_mask, "current_coupling_coefficient")
                            change_prop = mdl.prop(this_ind_mask, "change")
                            remove_prop = mdl.prop(this_ind_mask, "remove")

                            coupled_to_dict = couplings_dict.get(this_ind.item_fqid)
                            # Available inductors to couple to
                            names_of_available_inductors = list(inductors_dict.values())
                            # Removes itself
                            names_of_available_inductors.remove(inductors_dict.get(this_ind.item_fqid))

                            # If this inductor is coupled to others
                            if coupled_to_dict:
                                names_of_the_coupled_inductors = []
                                for coupind_fqid in coupled_to_dict.keys():
                                    names_of_the_coupled_inductors.append(inductors_dict.get(coupind_fqid))
                                    if names_of_available_inductors:
                                        names_of_available_inductors.remove(inductors_dict.get(coupind_fqid))
                                mdl.set_property_combo_values(select_coupled_prop, names_of_the_coupled_inductors)

                                # If a coupling has just been edited
                                if edited:
                                    coupind_fqid = mdl.get_item(edited).item_fqid
                                    mdl.set_property_disp_value(current_coupling_coefficient_prop, coupled_to_dict[coupind_fqid])
                                    mdl.set_property_disp_value(select_coupled_prop, edited)
                                    mdl.disable_property(change_prop)
                                elif names_of_the_coupled_inductors:
                                    mdl.set_property_value(select_coupled_prop, names_of_the_coupled_inductors[0])
                                    coupind_fqid = mdl.get_item(names_of_the_coupled_inductors[0]).item_fqid
                                    mdl.set_property_disp_value(current_coupling_coefficient_prop, coupled_to_dict[coupind_fqid])
                                    mdl.disable_property(change_prop)
                                mdl.enable_property(remove_prop)
                                mdl.enable_property(current_coupling_coefficient_prop)
                            # If this inductor is not coupled to others
                            else:
                                mdl.set_property_combo_values(select_coupled_prop, ['None'])
                                mdl.set_property_disp_value(current_coupling_coefficient_prop, "0")
                                mdl.disable_property(current_coupling_coefficient_prop)
                                mdl.disable_property(change_prop)
                                mdl.disable_property(remove_prop)

                            # If there are inductors available to couple to in the schematic level
                            if names_of_available_inductors:
                                mdl.set_property_combo_values(create_coupling_prop, names_of_available_inductors)
                                mdl.set_property_value(create_coupling_prop, names_of_available_inductors[0])
                                mdl.set_property_disp_value(create_coupling_prop, names_of_available_inductors[0])
                                mdl.enable_property(add_prop)
                                mdl.enable_property(coupling_coefficient_prop)
                            else:
                                mdl.set_property_combo_values(create_coupling_prop, ["No inductors available"])
                                mdl.set_property_value(create_coupling_prop, "No inductors available")
                                mdl.set_property_disp_value(create_coupling_prop, "No inductors available")
                                mdl.disable_property(add_prop)
                                mdl.disable_property(coupling_coefficient_prop)

                        def add_coupling(mask_handle):
                            this_ind_mask = mask_handle
                            this_ind = mdl.get_parent(this_ind_mask)
                            # Property handles
                            couplings_dict_prop = mdl.prop(this_ind_mask, "couplings_dict")
                            couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))
                            create_coupling_prop = mdl.prop(this_ind_mask, "create_coupling")
                            select_coupled_prop = mdl.prop(this_ind_mask, "select_coupled")
                            coupling_coefficient_prop = mdl.prop(this_ind_mask, "coupling_coefficient")
                            # Name of the inductor currently selected to be added
                            selected_ind = mdl.get_property_disp_value(create_coupling_prop)
                            # Current select_coupled values
                            select_coupled_list = mdl.get_property_combo_values(select_coupled_prop)

                            if not selected_ind == "No inductors available":
                                ind_handle = mdl.get_item(name=selected_ind)

                                coupled_to_dict = couplings_dict.get(this_ind.item_fqid)
                                counterpart_coupled_to_dict = couplings_dict.get(ind_handle.item_fqid)
                                # Create the first dict entries if there are no couplings for ind_handle yet
                                coupling_coefficient_value = mdl.get_property_disp_value(coupling_coefficient_prop)
                                if coupled_to_dict:
                                    coupled_to_dict.update({ind_handle.item_fqid:coupling_coefficient_value})
                                else:
                                    coupled_to_dict = {ind_handle.item_fqid:coupling_coefficient_value}
                                if counterpart_coupled_to_dict:
                                    counterpart_coupled_to_dict.update({this_ind.item_fqid:coupling_coefficient_value})
                                else:
                                    counterpart_coupled_to_dict = {this_ind.item_fqid:coupling_coefficient_value}

                                couplings_dict.update({this_ind.item_fqid:coupled_to_dict})
                                couplings_dict.update({ind_handle.item_fqid:counterpart_coupled_to_dict})

                                # Update couplings_dict of all inductors:
                                for item in mdl.get_items():
                                    try:
                                        if mdl.get_component_type_name(item) == "Coupled Inductor":
                                            couplings_dict_property = mdl.prop(item, "couplings_dict")
                                            mdl.set_property_combo_values(couplings_dict_property, [str(couplings_dict)])
                                            mdl.set_property_value(couplings_dict_property, str(couplings_dict))
                                            mdl.refresh_icon(item)
                                    except: pass

                            update_display(this_ind_mask, edited=selected_ind)

                        def selected_a_coupled_inductor(mask_handle):
                            this_ind_mask = mask_handle
                            this_ind = mdl.get_parent(this_ind_mask)

                            couplings_dict_prop = mdl.prop(this_ind_mask, "couplings_dict")
                            couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))
                            select_coupled_prop = mdl.prop(this_ind_mask, "select_coupled")
                            current_coupling_coefficient_prop = mdl.prop(this_ind_mask, "current_coupling_coefficient")
                            change_prop = mdl.prop(this_ind_mask, "change")

                            coupled_to_dict = couplings_dict.get(this_ind.item_fqid)
                            displayed_ind = mdl.get_property_disp_value(select_coupled_prop)
                            coupind_fqid = mdl.get_item(displayed_ind).item_fqid
                            mdl.set_property_disp_value(current_coupling_coefficient_prop, coupled_to_dict[coupind_fqid])
                            mdl.disable_property(change_prop)

                        def remove_coupling(mask_handle):
                            this_ind_mask = mask_handle
                            this_ind = mdl.get_parent(this_ind_mask)

                            couplings_dict_prop = mdl.prop(this_ind_mask, "couplings_dict")
                            couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))
                            select_coupled_prop = mdl.prop(this_ind_mask, "select_coupled")
                            displayed_ind = mdl.get_property_disp_value(select_coupled_prop)
                            ind_handle = mdl.get_item(displayed_ind)

                            coupled_to_dict = couplings_dict.get(this_ind.item_fqid)
                            counterpart_coupled_to_dict = couplings_dict.get(ind_handle.item_fqid)

                            coupled_to_dict.pop(ind_handle.item_fqid)
                            counterpart_coupled_to_dict.pop(this_ind.item_fqid)

                            # Update couplings_dict of all inductors:
                            for item in mdl.get_items():
                                try:
                                    if mdl.get_component_type_name(item) == "Coupled Inductor":
                                        couplings_dict_property = mdl.prop(item, "couplings_dict")
                                        mdl.set_property_combo_values(couplings_dict_property, [str(couplings_dict)])
                                        mdl.set_property_value(couplings_dict_property, str(couplings_dict))
                                        mdl.refresh_icon(item)
                                except: pass

                            update_display(this_ind_mask)

                        def change_coupling_value(mask_handle):
                            this_ind_mask = mask_handle
                            this_ind = mdl.get_parent(this_ind_mask)

                            couplings_dict_prop = mdl.prop(this_ind_mask, "couplings_dict")
                            couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))
                            select_coupled_prop = mdl.prop(this_ind_mask, "select_coupled")
                            displayed_ind = mdl.get_property_disp_value(select_coupled_prop)
                            ind_handle = mdl.get_item(displayed_ind)
                            current_coupling_coefficient_prop = mdl.prop(this_ind_mask, "current_coupling_coefficient")

                            coupled_to_dict = couplings_dict.get(this_ind.item_fqid)
                            counterpart_coupled_to_dict = couplings_dict.get(ind_handle.item_fqid)

                            new_value = mdl.get_property_disp_value(current_coupling_coefficient_prop)

                            coupled_to_dict.update({ind_handle.item_fqid:new_value})
                            counterpart_coupled_to_dict.update({this_ind.item_fqid:new_value})

                            # Update couplings_dict of all inductors:
                            for item in mdl.get_items():
                                try:
                                    if mdl.get_component_type_name(item) == "Coupled Inductor":
                                        couplings_dict_property = mdl.prop(item, "couplings_dict")
                                        mdl.set_property_combo_values(couplings_dict_property, [str(couplings_dict)])
                                        mdl.set_property_value(couplings_dict_property, str(couplings_dict))
                                except: pass

                            update_display(this_ind_mask, edited=displayed_ind)

                        def edited_current_coupling_box_value(mask_handle, new_value):
                            this_ind_mask = mask_handle
                            this_ind = mdl.get_parent(this_ind_mask)

                            couplings_dict_prop = mdl.prop(this_ind_mask, "couplings_dict")
                            couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))
                            select_coupled_prop = mdl.prop(this_ind_mask, "select_coupled")
                            current_coupling_coefficient_prop = mdl.prop(this_ind_mask, "current_coupling_coefficient")
                            change_prop = mdl.prop(this_ind_mask, "change")

                            displayed_ind = mdl.get_property_disp_value(select_coupled_prop)
                            displayed_coupling_value = mdl.get_property_disp_value(current_coupling_coefficient_prop)
                            coupled_to_dict = couplings_dict.get(this_ind.item_fqid)

                            ind_handle = mdl.get_item(displayed_ind)

                            if coupled_to_dict[ind_handle.item_fqid] == str(new_value):
                                mdl.disable_property(change_prop)
                            else:
                                mdl.enable_property(change_prop)

                    ENDCODE

                    CODE pre_compile

                        import ast

                        this_ind_mask = item_handle
                        this_ind = mdl.get_parent(this_ind_mask)

                        # Property handles
                        couplings_dict_prop = mdl.prop(this_ind_mask, "couplings_dict")
                        couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))

                        inductors_dict_prop = mdl.prop(this_ind_mask, "inductors_dict")
                        inductors_dict = ast.literal_eval(mdl.get_property_value(inductors_dict_prop))

                        items = mdl.get_items()
                        ind_count = 0
                        raise_error_topology_change = False

                        for item in items:
                            try:
                                if mdl.get_component_type_name(item) == "Coupled Inductor":
                                    if not mdl.get_name(item) in inductors_dict.values():
                                        # Renamed
                                        raise_error_topology_change = True
                                    ind_count = ind_count + 1
                            except: pass

                        if not ind_count == len(inductors_dict):
                            # Deleted/added
                            raise_error_topology_change = True

                        if raise_error_topology_change:
                            mdl.info("A Coupled Inductor was added/removed/renamed. Please double-click any Coupled Inductor component to update before starting Xyce.")

                        for ind_fqid in inductors_dict:
                            for coupled_to_dict in list(couplings_dict.values()):
                                found_entry = coupled_to_dict.pop(ind_fqid, None)
                                if found_entry:
                                    coupled_to_dict[inductors_dict[ind_fqid]] = found_entry

                            has_couplings = couplings_dict.pop(ind_fqid, None)
                            if has_couplings:
                                couplings_dict[inductors_dict[ind_fqid]] = has_couplings

                        # Adds self inductances to couplings_dict to allow coupling coefficient calculation
                        # Substitutes fqids by inductor names
                        for item in items:
                            try:
                                if mdl.get_component_type_name(item) == "Coupled Inductor":
                                    self_inductance_property = mdl.prop(item, "L")
                                    ind_self = mdl.get_property_value(self_inductance_property)
                                    ind_name = mdl.get_name(item)

                                    for key, coupled_to_dict in couplings_dict.items():
                                        if key == ind_name:
                                            coupled_to_dict.update({ind_name:ind_self})
                            except: pass

                        for item in mdl.get_items():
                            try:
                                if mdl.get_component_type_name(item) == "Coupled Inductor":
                                    xyce_couplings_dict_property = mdl.prop(item, "xyce_couplings_dict")

                                    if raise_error_topology_change:
                                        mdl.set_property_combo_values(xyce_couplings_dict_property, 0)
                                        mdl.set_property_value(xyce_couplings_dict_property, 0)
                                    else:
                                        mdl.set_property_combo_values(xyce_couplings_dict_property, [str(couplings_dict)])
                                        mdl.set_property_value(xyce_couplings_dict_property, str(couplings_dict))
                            except: pass

                    ENDCODE

                    CODE define_icon

                        import ast

                        couplings_dict_prop = mdl.prop(item_handle, "couplings_dict")
                        couplings_dict = ast.literal_eval(mdl.get_property_value(couplings_dict_prop))

                        this_ind = mdl.get_parent(item_handle)
                        if couplings_dict.values():
                            for coupled_dict in list(couplings_dict.values()):
                                if coupled_dict.get(this_ind.item_fqid):
                                    mdl.set_component_icon_image(item_handle, 'Xyce/coupled_inductor.svg')
                                    break
                                else:
                                    mdl.set_component_icon_image(item_handle, 'Xyce/not_coupled_inductor.svg')
                        else:
                            mdl.set_component_icon_image(item_handle, 'Xyce/not_coupled_inductor.svg')

                    ENDCODE

                    CODE post_resolve
                    ENDCODE
                }
            }
            [
                position = 7896, 8008
                size = 64, 64
            ]
        }
        [
            position = 8096, 8016
            size = 96, 96
        ]

        component Category Sources {
            layout = dynamic
            component Category "Independent Sources" {
                layout = dynamic
                component Category Voltage {
                    layout = dynamic
                    component Subsystem "Exponent Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 7976
                            rotation = right
                            hide_name = True
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 8152
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        connect Vs1.p_node p_node as Connection1
                        connect Vs1.n_node n_node as Connection2

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Exponent Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a \"EXP\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The output starts at the V1 voltage. At TD1 seconds, it rises exponentially to V2 according to TAU1. At TD2 seconds, it falls exponentially towards V1 according to TAU2.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The following equations describe the waveform:<br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0 < t < TD1:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">V(t) = V1 </p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">TD1 < t < TD2:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">V(t) = V1 + (V2-V1)(1-exp(-(t-TD1)/TAU1))     [Eq1]</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">t > TD2:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">V(t) = Eq1 + (V1-V2)(1-exp(-(t-TD2)/TAU2))</p></body></html>"

                            V1 {
                                label = "Initial amplitude (V1)"
                                widget = edit
                                type = generic
                                default_value = "-50"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            V2 {
                                label = "Final amplitude (V2)"
                                widget = edit
                                type = generic
                                default_value = "50"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            TD1 {
                                label = "Rise delay time (TD1)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TAU1 {
                                label = "Rise time constant (TAU1)"
                                widget = edit
                                type = generic
                                default_value = "0.005"
                            }

                            TD2 {
                                label = "Fall delay time (TD2)"
                                widget = edit
                                type = generic
                                default_value = "0.025"
                                unit = "s"
                            }

                            TAU2 {
                                label = "Fall time constant (TAU2)"
                                widget = edit
                                type = generic
                                default_value = "0.01"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_exp.svg')

                                V1 = mdl.prop(item_handle, "V1")
                                V2 = mdl.prop(item_handle, "V2")
                                min = mdl.get_property_value(V1)
                                max = mdl.get_property_value(V2)

                                min_text = f"{min} V"
                                max_text = f"{max} V"

                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7688, 8216
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "Pulse Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7920, 8032
                            rotation = right
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7920, 8120
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7920, 7952
                            rotation = right
                            hide_name = True
                        ]

                        connect Vs1.n_node n_node as Connection2
                        connect Vs1.p_node p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Pulse Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a \"PULSE\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The source output starts at the value defined by V1 and immediately rises to V2 according to TR. After PW seconds, it starts falling back to V1 according to TF. At PER seconds, it returns immediately to V1 and a new period starts.</p></body></html>"

                            V1 {
                                label = "Initial value (V1)"
                                widget = edit
                                type = generic
                                default_value = "-1"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            V2 {
                                label = "Pulse value (V2)"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            TD {
                                label = "Delay time (TD)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TR {
                                label = "Rise time (TR)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TF {
                                label = "Fall time (TF)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            PW {
                                label = "Pulse width (PW)"
                                widget = edit
                                type = generic
                                default_value = "0.0125"
                                unit = "s"
                            }

                            PER {
                                label = "Period (PER)"
                                widget = edit
                                type = generic
                                default_value = "0.025"
                                unit = "s"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_pulse.svg')

                                V1 = mdl.prop(item_handle, "V1")
                                V2 = mdl.prop(item_handle, "V2")
                                min = mdl.get_property_value(V1)
                                max = mdl.get_property_value(V2)

                                min_text = f"{min} V"
                                max_text = f"{max} V"

                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7456, 8216
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "DC Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 8160
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 7960
                            rotation = right
                            hide_name = True
                        ]

                        connect Vs1.n_node n_node as Connection2
                        connect Vs1.p_node p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">DC Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a constant value as transient specification (voltage).</p></body></html>"

                            voltage {
                                label = "Voltage"
                                widget = edit
                                type = generic
                                default_value = "100"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE

                                CODE property_value_edited
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_dc.svg')

                                voltage = mdl.prop(item_handle, "voltage")
                                vdc = mdl.get_property_value(voltage)

                                vdc_text = f"{vdc} V"

                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, vdc_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7456, 8072
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "AC Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 8144
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 7992
                            rotation = right
                            hide_name = True
                        ]

                        connect Vs1.n_node n_node as Connection2
                        connect p_node Vs1.p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">AC Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a \"SIN\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If a positive Delay is set, the source will output a constant voltage for TD seconds. Negative values are also accepted.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The sine wave is multiplied to the expression exp(-THETA*(t-TD)).</p></body></html>"

                            VA {
                                label = "Amplitude (VA)"
                                widget = edit
                                type = generic
                                default_value = "311"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            FREQ {
                                label = "Frequency (FREQ)"
                                widget = edit
                                type = generic
                                default_value = "50"
                                unit = "Hz"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            PHASE {
                                label = "Phase (PHASE)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "°"
                            }

                            V0 {
                                label = "Offset (V0)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "V"
                            }

                            TD {
                                label = "Delay (TD)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            THETA {
                                label = "Attenuation Factor (THETA)"
                                widget = edit
                                type = generic
                                default_value = "0"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_ac.svg')

                                VA = mdl.prop(item_handle, "VA")
                                FREQ = mdl.prop(item_handle, "FREQ")
                                amplitude = mdl.get_property_value(VA)
                                frequency = mdl.get_property_value(FREQ)

                                amp_text = f"{amplitude} V"
                                freq_text = f"{frequency} Hz"

                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, freq_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, amp_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7688, 8072
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "Triangular Voltage Source" {
                        layout = static
                        component src_voltage Vs1 {
                        }
                        [
                            position = 7920, 8032
                            rotation = right
                        ]

                        port p_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7920, 7952
                            rotation = right
                            hide_name = True
                        ]

                        port n_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7920, 8120
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        connect Vs1.p_node p_node as Connection1
                        connect Vs1.n_node n_node as Connection2

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Triangular Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"V\" type element with a \"PWL\" (piecewise-linear) transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The output starts at VMIN and rises linearly to VMAX, reaching it after TR seconds. The output then decreases linearly to VMIN during TF seconds.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The frequency of the triangular wave is defined therefore by inverse of (TR+TF).</p></body></html>"

                            vmax {
                                label = "Maximum voltage (VMAX)"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            vmin {
                                label = "Minimum voltage (VMIN)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "V"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            trise {
                                label = "Rise-time (TR)"
                                widget = edit
                                type = generic
                                default_value = "0.5"
                                unit = "s"
                            }

                            tfall {
                                label = "Fall-time (TF)"
                                widget = edit
                                type = generic
                                default_value = "0.5"
                                unit = "s"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/vs_triangular.svg')

                                VMIN = mdl.prop(item_handle, "vmin")
                                VMAX = mdl.prop(item_handle, "vmax")
                                min = mdl.get_property_value(VMIN)
                                max = mdl.get_property_value(VMAX)

                                min_text = f"{min} V"
                                max_text = f"{max} V"

                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7456, 8344
                        rotation = left
                        size = 64, 64
                    ]
                }
                [
                    position = 10504, 10408
                    size = 48, 48
                ]

                component Category Current {
                    layout = dynamic
                    component Subsystem "Exponent Current Source" {
                        layout = static
                        component src_current Is1 {
                        }
                        [
                            position = 7896, 8064
                            rotation = right
                        ]

                        port n_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7896, 8144
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7896, 7968
                            rotation = right
                            hide_name = True
                        ]

                        connect Is1.n_node n_node as Connection2
                        connect p_node Is1.p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Exponent Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"I\" type element with a \"EXP\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The output starts at the V1* current. At TD1 seconds, it rises exponentially to V2 according to TAU1. At TD2 seconds, it falls exponentially towards V1 according to TAU2.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">*This is the nomenclature used by Xyce.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The following equations describe the waveform:<br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">0 < t < TD1:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">I(t) = V1 </p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">TD1 < t < TD2:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">I(t) = V1 + (V2-V1)(1-exp(-(t-TD1)/TAU1))     [Eq1]</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">t > TD2:</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">I(t) = Eq1 + (V1-V2)(1-exp(-(t-TD2)/TAU2))</p></body></html>"

                            V1 {
                                label = "Initial amplitude (V1)"
                                widget = edit
                                type = generic
                                default_value = "-5"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            V2 {
                                label = "Final amplitude (V2)"
                                widget = edit
                                type = generic
                                default_value = "5"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            TD1 {
                                label = "Rise delay time (TD1)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TAU1 {
                                label = "Rise time constant (TAU1)"
                                widget = edit
                                type = generic
                                default_value = "0.01"
                            }

                            TD2 {
                                label = "Delay fall time (TD2)"
                                widget = edit
                                type = generic
                                default_value = "0.025"
                                unit = "s"
                            }

                            TAU2 {
                                label = "Fall time constant (TAU2)"
                                widget = edit
                                type = generic
                                default_value = "0.01"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/cs_exp.svg')

                                V1 = mdl.prop(item_handle, "V1")
                                V2 = mdl.prop(item_handle, "V2")
                                min = mdl.get_property_value(V1)
                                max = mdl.get_property_value(V2)

                                min_text = f"{min} A"
                                max_text = f"{max} A"

                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7896, 8184
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "AC Current Source" {
                        layout = static
                        component src_current Is1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port n_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 8144
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        port p_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 7984
                            rotation = right
                            hide_name = True
                        ]

                        connect p_node Is1.p_node as Connection1
                        connect Is1.n_node n_node as Connection2

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">AC Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"I\" type element with a \"SIN\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">If a positive Delay is set, the source will output a constant current for TD seconds. Negative values are also accepted.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The sine wave is multiplied to the expression exp(-THETA*(t-TD)).</p></body></html>"

                            VA {
                                label = "Amplitude (VA)"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            FREQ {
                                label = "Frequency (FREQ)"
                                widget = edit
                                type = generic
                                default_value = "50"
                                unit = "Hz"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            PHASE {
                                label = "Phase (PHASE)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "°"
                            }

                            V0 {
                                label = "Offset (V0)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "A"
                            }

                            TD {
                                label = "Delay (TD)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            THETA {
                                label = "Attenuation Factor (THETA)"
                                widget = edit
                                type = generic
                                default_value = "0"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/cs_ac.svg')

                                VA = mdl.prop(item_handle, "VA")
                                FREQ = mdl.prop(item_handle, "FREQ")
                                amplitude = mdl.get_property_value(VA)
                                frequency = mdl.get_property_value(FREQ)

                                amp_text = f"{amplitude} A"
                                freq_text = f"{frequency} Hz"

                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, freq_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, amp_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 8152, 8080
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "DC Current Source" {
                        layout = static
                        component src_current Is1 {
                        }
                        [
                            position = 7896, 8064
                            rotation = right
                        ]

                        port p_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7896, 7968
                            rotation = right
                            hide_name = True
                        ]

                        port n_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7896, 8152
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        connect p_node Is1.p_node as Connection1
                        connect Is1.n_node n_node as Connection2

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">DC Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"I\" type element with a constant value as transient specification (current).</p></body></html>"

                            current {
                                label = "Current"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/cs_dc.svg')

                                current = mdl.prop(item_handle, "current")
                                idc = mdl.get_property_value(current)

                                idc_text = f"{idc} A"

                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, idc_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 7896, 8072
                        rotation = left
                        size = 64, 64
                    ]

                    component Subsystem "Pulse Current Source" {
                        layout = static
                        component src_current Is1 {
                        }
                        [
                            position = 7904, 8064
                            rotation = right
                        ]

                        port p_node {
                            position = left center
                            kind = pe
                        }
                        [
                            position = 7904, 7976
                            rotation = right
                            hide_name = True
                        ]

                        port n_node {
                            position = right center
                            kind = pe
                        }
                        [
                            position = 7904, 8144
                            rotation = left
                            hide_name = True
                            scale = -1, 1
                        ]

                        connect Is1.n_node n_node as Connection2
                        connect Is1.p_node p_node as Connection1

                        mask {
                            description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Pulse Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"I\" type element with a \"PULSE\" transient specification.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The source output starts at the value defined by V1* and immediately rises to V2 according to TR. After PW seconds, it starts falling back to V1 according to TF. At PER seconds, it returns immediately to V1 and a new period starts.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">*This is the nomenclature used by Xyce.</p></body></html>"

                            V1 {
                                label = "Initial value (V1)"
                                widget = edit
                                type = generic
                                default_value = "-1"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            V2 {
                                label = "Pulse value (V2)"
                                widget = edit
                                type = generic
                                default_value = "1"
                                unit = "A"

                                CODE property_value_changed
                                    mdl.refresh_icon(container_handle)
                                ENDCODE
                            }

                            TD {
                                label = "Delay time (TD)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TR {
                                label = "Rise time (TR)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            TF {
                                label = "Fall time (TF)"
                                widget = edit
                                type = generic
                                default_value = "0"
                                unit = "s"
                            }

                            PW {
                                label = "Pulse width (PW)"
                                widget = edit
                                type = generic
                                default_value = "0.0125"
                                unit = "s"
                            }

                            PER {
                                label = "Period (PER)"
                                widget = edit
                                type = generic
                                default_value = "0.025"
                                unit = "s"
                            }

                            CODE open
                                from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                                dialog = RegularComponentPropertiesDialog(
                                    component=component,
                                    property_container=component.masks[-1],
                                    current_diagram=current_diagram
                                )
                                dialog.exec_()

                            ENDCODE

                            CODE define_icon
                                mdl.set_component_icon_image(item_handle, 'Xyce/cs_pulse.svg')

                                V1 = mdl.prop(item_handle, "V1")
                                V2 = mdl.prop(item_handle, "V2")
                                min = mdl.get_property_value(V1)
                                max = mdl.get_property_value(V2)

                                min_text = f"{min} A"
                                max_text = f"{max} A"

                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, min_text, relpos_x = 0.5, relpos_y = 0.9, size = 8, trim_factor = 0.7)
                                mdl.disp_component_icon_text(item_handle, max_text, relpos_x = 0.5, relpos_y = 0.12, size = 8, trim_factor = 0.7)
                            ENDCODE
                        }
                    }
                    [
                        position = 8152, 8176
                        rotation = left
                        size = 64, 64
                    ]
                }
                [
                    position = 10592, 10408
                    size = 48, 48
                ]
            }
            [
                position = 7472, 8112
                size = 96, 104
            ]

            component Category "Controlled Sources" {
                layout = dynamic
                component Subsystem "Voltage-Controlled Current Source" {
                    layout = static
                    component el_short "Short Circuit1" {
                    }
                    [
                        position = 7904, 7992
                    ]

                    component el_short "Short Circuit" {
                    }
                    [
                        position = 7904, 8064
                    ]

                    port p_ctrl {
                        label = "Ctrl+"
                        position = 12.0, -26.0
                        kind = pe
                    }
                    [
                        position = 7768, 7992
                        hide_name = True
                    ]

                    port n_ctrl {
                        label = "Ctrl-"
                        position = -12.0, -26.0
                        kind = pe
                    }
                    [
                        position = 8040, 7992
                        hide_name = True
                        scale = -1, 1
                    ]

                    port p_node {
                        label = "+"
                        position = left center
                        kind = pe
                    }
                    [
                        position = 7768, 8064
                        hide_name = True
                    ]

                    port n_node {
                        label = "-"
                        position = right center
                        kind = pe
                    }
                    [
                        position = 8040, 8064
                        hide_name = True
                        scale = -1, 1
                    ]

                    connect "Short Circuit1.n_node" n_ctrl as Connection4
                    connect p_ctrl "Short Circuit1.p_node" as Connection3
                    connect "Short Circuit.n_node" n_node as Connection2
                    connect p_node "Short Circuit.p_node" as Connection1

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Voltage-Controlled Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"G\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The differential voltage measured between + and - terminals controls the current output according to the transcondutance (gm) value.</p></body></html>"

                        transc {
                            label = "Transconductance"
                            widget = edit
                            type = generic
                            default_value = "1"

                            CODE property_value_changed
                                mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, 'Xyce/vccs.svg')

                            transc_prop = mdl.prop(item_handle, "transc")
                            transc = mdl.get_property_value(transc_prop)

                            text = f" gm = {transc}"

                            mdl.set_color(item_handle, "blue")
                            mdl.disp_component_icon_text(item_handle, text, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                        ENDCODE
                    }
                }
                [
                    position = 7872, 8128
                    rotation = left
                    size = 64, 64
                ]

                component Subsystem "Current-Controlled Current Source" {
                    layout = static
                    component el_short "Short Circuit" {
                    }
                    [
                        position = 7904, 8064
                    ]

                    port p_node {
                        label = "+"
                        position = left center
                        kind = pe
                    }
                    [
                        position = 7768, 8064
                        hide_name = True
                    ]

                    port n_node {
                        label = "-"
                        position = right center
                        kind = pe
                    }
                    [
                        position = 8040, 8064
                        hide_name = True
                        scale = -1, 1
                    ]

                    connect "Short Circuit.n_node" n_node as Connection2
                    connect p_node "Short Circuit.p_node" as Connection1

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Current-Controlled Current Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"F\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A controlling current must be selected from the list of current measurements added to the circuit. The current output is controlled according to the selected current and the gain (g) value.</p></body></html>"

                        gain {
                            label = "Gain"
                            widget = edit
                            type = generic
                            default_value = "1"

                            CODE property_value_changed
                                mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        ctrl_name {
                            label = "Controlling measurement name"
                            widget = combo
                            combo_values = "None"
                            type = string
                            default_value = "None"
                            no_evaluate

                            CODE property_value_changed
                                mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        update_currents {
                            label = "Update current measurements"
                            widget = button
                            type = string
                            default_value = "Update"
                            no_evaluate

                            CODE button_clicked
                                update_current_measurements()
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE define_icon
                            ctrl_name_prop = mdl.prop(item_handle, "ctrl_name")
                            ctrl_name = mdl.get_property_disp_value(ctrl_name_prop)

                            mdl.set_component_icon_image(item_handle, 'Xyce/cccs.svg')

                            if not ctrl_name == "None":
                                mdl.set_component_icon_image(item_handle, 'Xyce/cccs_active.svg')
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + ctrl_name, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                        ENDCODE

                        CODE init
                            def update_current_measurements():
                                i_list = []

                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current Measurement":
                                            i_list.append(item.fqn.split(".")[0])
                                    except AttributeError: pass

                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current-Controlled Current Source":
                                            ctrl_name_prop = mdl.prop(item, "ctrl_name")
                                            mdl.set_property_combo_values(ctrl_name_prop, i_list)
                                            displayed_ctrl = mdl.get_property_disp_value(ctrl_name_prop)
                                            if displayed_ctrl not in i_list:
                                                mdl.set_property_value(ctrl_name_prop, "None")
                                                mdl.refresh_icon(item)
                                    except AttributeError: pass

                            update_current_measurements()
                        ENDCODE
                    }
                }
                [
                    position = 7872, 8248
                    rotation = left
                    size = 64, 64
                ]

                component Subsystem "Current-Controlled Voltage Source" {
                    layout = static
                    component el_short "Short Circuit" {
                    }
                    [
                        position = 7904, 8064
                    ]

                    port n_node {
                        label = "-"
                        position = left center
                        kind = pe
                    }
                    [
                        position = 8040, 8064
                        hide_name = True
                        scale = -1, 1
                    ]

                    port p_node {
                        label = "+"
                        position = right center
                        kind = pe
                    }
                    [
                        position = 7768, 8064
                        hide_name = True
                    ]

                    connect "Short Circuit.n_node" n_node as Connection2
                    connect p_node "Short Circuit.p_node" as Connection1

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Current-Controlled Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"H\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">A controlling current must be selected from the list of current measurements added to the circuit. The voltage output is controlled according to the selected current and the transresistance (rm) value. </p></body></html>"

                        transr {
                            label = "Transresistance"
                            widget = edit
                            type = generic
                            default_value = "1"

                            CODE property_value_changed
                                refresh_all_ccvs_icons()
                            ENDCODE
                        }

                        ctrl_name {
                            label = "Controlling measurement name"
                            widget = combo
                            combo_values = "None"
                            type = string
                            default_value = "None"
                            no_evaluate

                            CODE property_value_changed
                                refresh_all_ccvs_icons()
                            ENDCODE
                        }

                        update_currents {
                            label = "Update current measurements"
                            widget = button
                            type = string
                            default_value = "Update"
                            no_evaluate

                            CODE button_clicked
                                update_current_measurements()
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE define_icon
                            ctrl_name_prop = mdl.prop(item_handle, "ctrl_name")
                            ctrl_name = mdl.get_property_disp_value(ctrl_name_prop)

                            mdl.set_component_icon_image(item_handle, 'Xyce/ccvs.svg')

                            if not ctrl_name == "None":
                                mdl.set_component_icon_image(item_handle, 'Xyce/ccvs_active.svg')
                                mdl.set_color(item_handle, "blue")
                                mdl.disp_component_icon_text(item_handle, " " + ctrl_name, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                        ENDCODE

                        CODE init
                            def update_current_measurements():
                                i_list = []

                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current Measurement":
                                            i_list.append(item.fqn.split(".")[0])
                                    except AttributeError: pass

                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current-Controlled Voltage Source":
                                            ctrl_name_prop = mdl.prop(item, "ctrl_name")
                                            mdl.set_property_combo_values(ctrl_name_prop, i_list)
                                            displayed_ctrl = mdl.get_property_disp_value(ctrl_name_prop)
                                            if displayed_ctrl not in i_list:
                                                mdl.set_property_value(ctrl_name_prop, "None")
                                    except AttributeError: pass

                            def refresh_all_ccvs_icons():
                                for item in mdl.get_items():
                                    try: # Not every component has a type
                                        if mdl.get_component_type_name(item) == "Current-Controlled Voltage Source":
                                            mdl.refresh_icon(item)
                                    except AttributeError: pass

                            update_current_measurements()
                        ENDCODE
                    }
                }
                [
                    position = 8232, 8248
                    rotation = left
                    size = 64, 64
                ]

                component Subsystem "Voltage-Controlled Voltage Source" {
                    layout = static
                    component el_short "Short Circuit" {
                    }
                    [
                        position = 7848, 8064
                    ]

                    component el_short "Short Circuit1" {
                    }
                    [
                        position = 7848, 7968
                    ]

                    component el_short "Short Circuit2" {
                    }
                    [
                        position = 7976, 8016
                        rotation = right
                    ]

                    port p_node {
                        label = "+"
                        position = right center
                        kind = pe
                    }
                    [
                        position = 7768, 8064
                        hide_name = True
                    ]

                    port n_ctrl {
                        label = "Ctrl-"
                        position = -12.0, -25.0
                        kind = pe
                    }
                    [
                        position = 8040, 7968
                        hide_name = True
                        scale = -1, 1
                    ]

                    port n_node {
                        label = "-"
                        position = left center
                        kind = pe
                    }
                    [
                        position = 8040, 8064
                        hide_name = True
                        scale = -1, 1
                    ]

                    port p_ctrl {
                        label = "Ctrl+"
                        position = 12.0, -25.0
                        kind = pe
                    }
                    [
                        position = 7768, 7968
                        hide_name = True
                    ]

                    junction Junction1 pe
                    [
                        position = 7976, 7968
                    ]

                    junction Junction2 pe
                    [
                        position = 7976, 8064
                    ]

                    connect p_ctrl "Short Circuit1.p_node" as Connection3
                    connect p_node "Short Circuit.p_node" as Connection1
                    connect "Short Circuit1.n_node" Junction1 as Connection5
                    connect Junction1 n_ctrl as Connection6
                    connect "Short Circuit2.p_node" Junction1 as Connection7
                    connect "Short Circuit.n_node" Junction2 as Connection8
                    connect Junction2 n_node as Connection9
                    connect "Short Circuit2.n_node" Junction2 as Connection10

                    mask {
                        description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Voltage-Controlled Voltage Source</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is an \"E\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The differential voltage measured between + and - terminals controls the voltage output according to the gain (g) value.</p></body></html>"

                        gain {
                            label = "Gain"
                            widget = edit
                            type = generic
                            default_value = "1"

                            CODE property_value_changed
                                mdl.refresh_icon(container_handle)
                            ENDCODE
                        }

                        CODE open
                            from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                            dialog = RegularComponentPropertiesDialog(
                                component=component,
                                property_container=component.masks[-1],
                                current_diagram=current_diagram
                            )
                            dialog.exec_()

                        ENDCODE

                        CODE define_icon
                            mdl.set_component_icon_image(item_handle, 'Xyce/vcvs.svg')

                            gain_prop = mdl.prop(item_handle, "gain")
                            gain = mdl.get_property_value(gain_prop)

                            text = f" g = {gain}"

                            mdl.set_color(item_handle, "blue")
                            mdl.disp_component_icon_text(item_handle, text, relpos_x = 0.5, relpos_y = 0.87, size = 8)
                        ENDCODE
                    }
                }
                [
                    position = 8232, 8128
                    rotation = left
                    size = 64, 64
                ]
            }
            [
                position = 7672, 8112
                size = 96, 104
            ]

            component src_ground Ground {
            }
            [
                position = 7280, 8120
            ]
        }
        [
            position = 7872, 8016
            size = 96, 104
        ]

        component Category "Transmission Lines" {
            layout = dynamic
            component Subsystem "Lossy Transmission Line" {
                layout = static
                component el_short "Short Circuit1" {
                }
                [
                    position = 7904, 7992
                ]

                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                port P1_n {
                    label = "P1-"
                    position = -64.0, 20.0
                    kind = pe
                }
                [
                    position = 7768, 8064
                ]

                port P2_n {
                    label = "P2-"
                    position = 64.0, 20.0
                    kind = pe
                }
                [
                    position = 8040, 8064
                    scale = -1, 1
                ]

                port P1_p {
                    label = "P1+"
                    position = -64.0, -20.0
                    kind = pe
                }
                [
                    position = 7768, 7992
                ]

                port P2_p {
                    label = "P2+"
                    position = 64.0, -20.0
                    kind = pe
                }
                [
                    position = 8040, 7992
                    scale = -1, 1
                ]

                connect "Short Circuit.n_node" P2_n as Connection2
                connect "Short Circuit1.n_node" P2_p as Connection4
                connect P1_n "Short Circuit.p_node" as Connection1
                connect P1_p "Short Circuit1.p_node" as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Lossy Transmission Line</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"O\" type element, a distributed parameters line model.</p></body></html>"

                    LEN {
                        label = "Line length"
                        widget = edit
                        type = generic
                        default_value = "500"
                        unit = "m"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    R {
                        label = "Resistance per meter"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "Ω/m"
                    }

                    C {
                        label = "Capacitance per meter"
                        widget = edit
                        type = generic
                        default_value = "10n"
                        unit = "C/m"
                    }

                    L {
                        label = "Inductance per meter"
                        widget = edit
                        type = generic
                        default_value = "100n"
                        unit = "L/m"
                    }

                    interp {
                        label = "Interpolation Type"
                        widget = combo
                        combo_values = "Quadratic", "Mixed", "Linear"
                        type = string
                        default_value = "Quadratic"
                        group = "Advanced"
                        no_evaluate
                    }

                    steplimit {
                        label = "Can reduce time-step for accuracy"
                        widget = checkbox
                        type = bool
                        default_value = "True"
                        group = "Advanced"
                        no_evaluate
                    }

                    complexstepcontrol {
                        label = "Step control by LTE estimation"
                        widget = checkbox
                        type = bool
                        default_value = "False"
                        group = "Advanced"
                        no_evaluate
                    }

                    rel {
                        label = "Relat. rate of change of derivative for breakpoint"
                        widget = edit
                        type = generic
                        default_value = "1"
                        group = "Advanced"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/lossy_tl.svg')

                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)

                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"

                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)

                        len_prop = mdl.prop(item_handle, "LEN")
                        len_text, color = get_text(len_prop, "m")

                        if not ignore == True:
                            mdl.set_color(item_handle, color)
                            mdl.disp_component_icon_text(item_handle, len_text, relpos_x = 0.5, relpos_y = 0.5, size = 8)
                    ENDCODE
                }
            }
            [
                position = 7856, 8000
                size = 128, 64
            ]

            component Subsystem "Lumped Transmission Line" {
                layout = static
                component el_short "Short Circuit1" {
                }
                [
                    position = 7904, 7992
                ]

                port P1_p {
                    label = "P1+"
                    position = left center
                    kind = pe
                }
                [
                    position = 7768, 7992
                ]

                port P2_p {
                    label = "P2+"
                    position = right center
                    kind = pe
                }
                [
                    position = 8040, 7992
                    scale = -1, 1
                ]

                connect P1_p "Short Circuit1.p_node" as Connection3
                connect "Short Circuit1.n_node" P2_p as Connection4

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Lumped Transmission Line</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"ytransline\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The Lumped Transmission Line approximates the line by a series of RLC sections.</p></body></html>"

                    LEN {
                        label = "Line length"
                        widget = edit
                        type = generic
                        default_value = "500"
                        unit = "m"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    R {
                        label = "Resistance per meter"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "Ω/m"
                    }

                    C {
                        label = "Capacitance per meter"
                        widget = edit
                        type = generic
                        default_value = "10e-9"
                        unit = "C/m"
                    }

                    L {
                        label = "Inductance per meter"
                        widget = edit
                        type = generic
                        default_value = "100e-9"
                        unit = "L/m"
                    }

                    LUMPS {
                        label = "Number of sections"
                        widget = edit
                        type = generic
                        default_value = "50"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/lumped_tl.svg')

                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)

                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"

                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)

                        len_prop = mdl.prop(item_handle, "LEN")
                        lumps_prop = mdl.prop(item_handle, "LUMPS")

                        len_text, color_len = get_text(len_prop, "m")
                        lumps_text, color_lumps = get_text(lumps_prop, "")

                        if not ignore == True:
                            mdl.set_color(item_handle, color_len)
                            mdl.disp_component_icon_text(item_handle, len_text, relpos_x = 0.5, relpos_y = 0.11, size = 8)
                            mdl.set_color(item_handle, color_lumps)
                            mdl.disp_component_icon_text(item_handle, "x"+lumps_text, relpos_x = 0.5, relpos_y = 0.5, size = 8)
                    ENDCODE
                }
            }
            [
                position = 8056, 8000
                size = 64, 64
            ]

            component Subsystem "Ideal Transmission Line" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7904, 7992
                ]

                port P1_p {
                    label = "P1+"
                    position = -64.0, -20.0
                    kind = pe
                }
                [
                    position = 7768, 7992
                ]

                port P1_n {
                    label = "P1-"
                    position = -64.0, 20.0
                    kind = pe
                }
                [
                    position = 7768, 8064
                ]

                port P2_p {
                    label = "P2+"
                    position = 64.0, -20.0
                    kind = pe
                }
                [
                    position = 8040, 7992
                    scale = -1, 1
                ]

                port P2_n {
                    label = "P2-"
                    position = 64.0, 20.0
                    kind = pe
                }
                [
                    position = 8040, 8064
                    scale = -1, 1
                ]

                connect P1_n "Short Circuit.p_node" as Connection1
                connect "Short Circuit.n_node" P2_n as Connection2
                connect "Short Circuit1.n_node" P2_p as Connection4
                connect P1_p "Short Circuit1.p_node" as Connection3

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Ideal Transmission Line</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>In Xyce, this is a \"T\" type element.</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The line length is indirectly defined by the time delay (TD).</p></body></html>"

                    Z0 {
                        label = "Characteristic Impedance (Z0)"
                        widget = edit
                        type = generic
                        default_value = "50"
                        unit = "Ω"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    TD {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "10e-3"
                        unit = "s"

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/ideal_tl.svg')

                        ignore = False
                        def unit_conv(value, unit):
                            if value == 0:
                                pass
                            elif value < 1e-9:
                                value = value * 1e12
                                unit = "p" + unit
                            elif value < 1e-6:
                                value = value * 1e9
                                unit = "n" + unit
                            elif value < 1e-3:
                                value = value * 1e6
                                unit = "μ" + unit
                            elif value < 1:
                                value = value * 1e3
                                unit = "m" + unit
                            elif value < 1e3:
                                pass
                            elif value < 1e6:
                                value = value * 1e-3
                                unit = "k" + unit
                            elif value < 1e9:
                                value = value * 1e-6
                                unit = "M" + unit
                            elif value < 1e12:
                                value = value * 1e-9
                                unit = "G" + unit
                            return (value, unit)

                        def prefix_to_scientific(prefix):
                            if prefix == "p":
                                return "e-12"
                            if prefix == "n":
                                return "e-9"
                            if prefix == "u":
                                return "e-6"
                            if prefix == "m":
                                return "e-3"
                            if prefix == "k":
                                return "e3"
                            if prefix == "M":
                                return "e6"
                            if prefix == "G":
                                return "e9"

                        def get_text(prop_handle, unit):
                            val = mdl.get_property_value(prop_handle)
                            # If val is not a string
                            if not isinstance(val, str):
                                val, unit = unit_conv(val, unit)
                                color = "blue"
                                inside_text = f"{val} {unit}"
                                return (inside_text, color)
                            # In case a variable (or a unit prefix) is being used
                            else:
                                try:
                                    import re
                                    matching = re.match(r"([0-9.]+)\s*(p|n|u|m|k|M|G)", val)
                                    if matching.group(2):
                                        nonlocal ignore
                                        n_val = matching.group(1) + prefix_to_scientific(matching.group(2))
                                        # The property must have mdl.refresh_icon(container_handle) in property_value_edited
                                        mdl.set_property_value(prop_handle, n_val)
                                        ignore = True
                                        return ("", "")
                                except:
                                    color = "green"
                                    inside_text = f"{val}"
                                    return (inside_text, color)

                        TD_prop = mdl.prop(item_handle, "TD")
                        Z0_prop = mdl.prop(item_handle, "Z0")

                        TD_text, color1 = get_text(TD_prop, "s")
                        Z0_text, color2 = get_text(Z0_prop, "Ω")

                        if not ignore == True:
                            mdl.set_color(item_handle, color1)
                            mdl.disp_component_icon_text(item_handle, TD_text, relpos_x = 0.7, relpos_y = 0.5, size = 8, trim_factor = 0.4)
                            mdl.set_color(item_handle, color2)
                            mdl.disp_component_icon_text(item_handle, Z0_text, relpos_x = 0.3, relpos_y = 0.5, size = 8, trim_factor = 0.4)
                    ENDCODE

                    CODE post_resolve
                    ENDCODE
                }
            }
            [
                position = 7616, 8000
                size = 128, 64
            ]
        }
        [
            position = 8096, 8208
            size = 96, 104
        ]

        component Category Electronics {
            layout = dynamic
            component Subsystem "Operational Amplifier" {
                layout = static
                component "xyce_lib/Ideal Resistor" Rin {
                    R = "10e6"
                }
                [
                    position = 7912, 8168
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Voltage-Controlled Voltage Source" Gain {
                    gain = "gain"
                }
                [
                    position = 8040, 8168
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Capacitor" Cf {
                    C = "Cf"
                }
                [
                    position = 8272, 8176
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" Rf {
                    R = "Rf"
                }
                [
                    position = 8152, 8112
                    size = 64, 64
                ]

                component "xyce_lib/Voltage-Controlled Voltage Source" Eout {
                    gain = "gain"
                }
                [
                    position = 8408, 8176
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" RGND2 {
                    R = "1"
                }
                [
                    position = 8408, 8296
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" RGND {
                    R = "1"
                }
                [
                    position = 8040, 8296
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" Rout {
                }
                [
                    position = 8512, 8112
                    size = 64, 64
                ]

                component src_ground gnd1 {
                }
                [
                    position = 8248, 8400
                ]

                port inv {
                    position = -32.0, 20.0
                    kind = pe
                }
                [
                    position = 7832, 8240
                    hide_name = True
                ]

                port non_inv {
                    position = -32.0, -20.0
                    kind = pe
                }
                [
                    position = 7832, 8112
                    hide_name = True
                ]

                port Out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8608, 8112
                    rotation = down
                    hide_name = True
                ]

                junction Junction11 pe
                [
                    position = 7912, 8112
                ]

                junction Junction14 pe
                [
                    position = 8248, 8344
                ]

                junction Junction15 pe
                [
                    position = 8040, 8232
                ]

                junction Junction17 pe
                [
                    position = 7912, 8240
                ]

                junction Junction18 pe
                [
                    position = 8272, 8232
                ]

                junction Junction19 pe
                [
                    position = 8272, 8112
                ]

                connect Gain.p_node Rf.n_node as Connection92
                connect Rout.p_node Out as Connection109
                connect Rout.n_node Eout.p_node as Connection110
                connect non_inv Junction11 as Connection138
                connect Junction11 Gain.p_ctrl as Connection139
                connect Rin.p_node Junction11 as Connection140
                connect RGND2.p_node Eout.n_node as Connection146
                connect gnd1.node Junction14 as Connection150
                connect Junction14 RGND2.n_node as Connection151
                connect RGND.n_node Junction14 as Connection152
                [
                    position = 0, 0
                    breakpoints = 8040, 8344; 8248, 8344
                ]
                connect RGND.p_node Junction15 as Connection155
                [
                    position = 0, 0
                    breakpoints = 8040, 8248
                ]
                connect Junction15 Gain.n_node as Connection156
                connect inv Junction17 as Connection162
                connect Junction17 Rin.n_node as Connection163
                [
                    position = 0, 0
                    breakpoints = 7912, 8240
                ]
                connect Gain.n_ctrl Junction17 as Connection164
                connect Cf.n_node Junction18 as Connection166
                connect Junction18 Junction15 as Connection167
                [
                    position = 0, 0
                    breakpoints = 8272, 8232
                ]
                connect Eout.n_ctrl Junction18 as Connection168
                connect Cf.p_node Junction19 as Connection170
                connect Junction19 Rf.p_node as Connection171
                [
                    position = 0, 0
                    breakpoints = 8272, 8112; 8272, 8112
                ]
                connect Eout.p_ctrl Junction19 as Connection172

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Operational Amplifier</p></body></html>"

                    model_type {
                        label = "Model type"
                        widget = combo
                        combo_values = "Ideal", "Low-pass filter"
                        type = string
                        default_value = "Ideal"
                        no_evaluate
                    }

                    gain {
                        label = "Large Signal Gain"
                        widget = edit
                        type = generic
                        default_value = "1000000"
                        unit = "V/V"
                    }

                    Rf {
                        label = "Rf"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        unit = "ohms"

                        CODE property_value_changed
                            new_filter_cap()
                        ENDCODE
                    }

                    Cf {
                        label = "Cf"
                        widget = edit
                        type = generic
                        default_value = "1.5915494309188487e-05"
                        unit = "F"
                        nonvisible
                    }

                    fp {
                        label = "Filter pole frequency"
                        widget = edit
                        type = generic
                        default_value = "10"
                        unit = "Hz"

                        CODE property_value_changed
                            new_filter_cap()
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/op_amp.svg')
                    ENDCODE

                    CODE init
                        def new_filter_cap():
                            fp_prop = mdl.prop(item_handle, "fp")
                            fp = mdl.get_property_value(fp_prop)

                            Rf_prop = mdl.prop(item_handle, "Rf")
                            Rf = mdl.get_property_value(Rf_prop)

                            try:
                                pi = 3.14159265359
                                cap = 1/(2*pi*fp*Rf)

                                Cf = mdl.prop(item_handle, "Cf")
                                mdl.set_property_value(Cf, cap)

                            except ZeroDivisionError:
                                mdl.info("Filter resistor and capacitor cannot be set to zero.")
                                mdl.set_property_value(fp_prop, fp)
                                mdl.set_property_value(Rf_prop, Rf)
                    ENDCODE
                }
            }
            [
                position = 7568, 7968
                size = 64, 64
            ]

            component Subsystem "Ideal Comparator" {
                layout = static
                component src_ground gnd1 {
                }
                [
                    position = 8000, 8432
                ]

                component "xyce_lib/Ideal Resistor" R_OUT {
                    R = "2"
                }
                [
                    position = 8272, 8264
                    rotation = right
                    size = 64, 64
                ]

                component "xyce_lib/Ideal Resistor" R_VCC {
                    R = "1"
                }
                [
                    position = 8104, 8080
                    rotation = right
                    size = 64, 64
                ]

                component "xyce_lib/Voltage-Controlled Switch" Sw {
                    r_on = "2"
                }
                [
                    position = 8104, 8216
                    rotation = left
                    size = 64, 64
                ]

                component "core/Current Measurement" Ia1 {
                }
                [
                    position = 8104, 8320
                    rotation = right
                    size = 64, 32
                ]

                component "xyce_lib/Current-Controlled Voltage Source" H_VOUT {
                    transr = "4"
                }
                [
                    position = 8416, 8264
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/DC Voltage Source" V_VCC {
                    voltage = "3.3"
                }
                [
                    position = 7896, 8216
                    rotation = left
                    size = 64, 64
                ]

                port inv {
                    position = -32.0, 20.0
                    kind = pe
                }
                [
                    position = 8024, 8256
                    hide_name = True
                ]

                port Out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8504, 8144
                    rotation = down
                    hide_name = True
                ]

                port non_inv {
                    position = -32.0, -20.0
                    kind = pe
                }
                [
                    position = 8024, 8184
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 8000, 8384
                ]

                junction Junction2 pe
                [
                    position = 8104, 8144
                ]

                junction Junction3 pe
                [
                    position = 8104, 8384
                ]

                junction Junction4 pe
                [
                    position = 8272, 8384
                ]

                connect Sw.p_node Ia1.p_node as Connection178
                connect V_VCC.p_node R_VCC.n_node as Connection181
                [
                    position = 0, 0
                    breakpoints = 7896, 8008; 8104, 8008
                ]
                connect gnd1.node Junction1 as Connection182
                connect Junction1 V_VCC.n_node as Connection183
                [
                    position = 0, 0
                    breakpoints = 8000, 8384; 7896, 8384
                ]
                connect R_VCC.p_node Junction2 as Connection185
                connect Junction2 Sw.n_node as Connection186
                connect R_OUT.n_node Junction2 as Connection187
                connect Ia1.n_node Junction3 as Connection188
                connect Junction3 Junction1 as Connection189
                connect Out H_VOUT.p_node as Connection191
                connect R_OUT.p_node Junction4 as Connection192
                connect Junction4 Junction3 as Connection193
                connect H_VOUT.n_node Junction4 as Connection194
                connect inv Sw.n_ctrl as Connection196
                connect non_inv Sw.p_ctrl as Connection197

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Comparator</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">The comparator outputs the specified voltage magnitude. The polarity is determined by the sign of the diference between the non-inverting input and inverting input voltage values.</p></body></html>"

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/op_amp.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7424, 7968
                size = 64, 64
            ]

            component Subsystem "Pulse Width Modulator" {
                layout = static
                component src_ground gnd1 {
                }
                [
                    position = 7920, 8336
                ]

                component "xyce_lib/Ideal Resistor" Rduty {
                    R = "1000"
                }
                [
                    position = 7920, 8200
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Pulse Voltage Source" "Pulse Voltage Source1" {
                    PER = "0"
                    PW = "0"
                    V1 = "0"
                }
                [
                    position = 8200, 8200
                    rotation = left
                    size = 64, 64
                ]

                component "xyce_lib/Pulse Voltage Source" "Pulse Voltage Source2" {
                    PER = "0"
                    PW = "0"
                    V1 = "0"
                }
                [
                    position = 8440, 8208
                    rotation = left
                    size = 64, 64
                ]

                port Out {
                    position = 32.0, -20.0
                    kind = pe
                }
                [
                    position = 8288, 8112
                    rotation = down
                ]

                port duty {
                    position = left center
                    kind = pe
                }
                [
                    position = 7824, 8112
                ]

                port "Comp Out" {
                    position = 32.0, 20.0
                    kind = pe
                }
                [
                    position = 8528, 8112
                    rotation = down
                ]

                junction Junction1 pe
                [
                    position = 7920, 8296
                ]

                junction Junction2 pe
                [
                    position = 8200, 8296
                ]

                connect duty Rduty.p_node as Connection170
                [
                    position = 0, 0
                    breakpoints = 7920, 8112; 7912, 8112
                ]
                connect gnd1.node Junction1 as Connection173
                connect Junction1 Rduty.n_node as Connection174
                connect Out "Pulse Voltage Source1.p_node" as Connection176
                connect "Comp Out" "Pulse Voltage Source2.p_node" as Connection181
                connect "Pulse Voltage Source1.n_node" Junction2 as Connection182
                connect Junction2 Junction1 as Connection183
                [
                    position = 0, 0
                    breakpoints = 8048, 8296
                ]
                connect "Pulse Voltage Source2.n_node" Junction2 as Connection184

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Pulse Width Modulator</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Outputs complementary square-shaped waveforms from 0 V minimum voltage to the chosen maximum value.<br></br><br></br>The dead-time value is a percentage of the ouput waveform\'s period.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>The duty-cycle input accepts a voltage from 0 V to 1 V.</p></body></html>"

                    vmax {
                        label = "Output High-Voltage"
                        widget = edit
                        type = generic
                        default_value = "5"
                        unit = "V"
                    }

                    freq {
                        label = "Frequency"
                        widget = edit
                        type = generic
                        default_value = "1000"
                    }

                    deadtime {
                        label = "Dead-time"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "%"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/pwm.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7712, 7968
                size = 64, 64
            ]

            component Subsystem "Model-based OpAmp" {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7896, 8040
                    rotation = down
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7896, 8112
                    rotation = down
                ]

                component el_short "Short Circuit2" {
                }
                [
                    position = 7896, 8176
                    rotation = down
                ]

                component el_short "Short Circuit3" {
                }
                [
                    position = 7896, 8248
                    rotation = down
                ]

                port p_node {
                    label = "-"
                    position = -32.0, 20.0
                    kind = pe
                }
                [
                    position = 8000, 8040
                    rotation = down
                    hide_name = True
                ]

                port n_node {
                    label = "+"
                    position = -32.0, -20.0
                    kind = pe
                }
                [
                    position = 7776, 8040
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                port p_node1 {
                    label = "VCC+"
                    position = top center
                    kind = pe
                }
                [
                    position = 8000, 8112
                    rotation = down
                    hide_name = True
                ]

                port p_node2 {
                    label = "VCC-"
                    position = bottom center
                    kind = pe
                }
                [
                    position = 8000, 8176
                    rotation = down
                    hide_name = True
                ]

                port p_node3 {
                    label = "Out"
                    position = right center
                    kind = pe
                }
                [
                    position = 8000, 8248
                    rotation = down
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 7816, 8040
                ]

                junction Junction2 pe
                [
                    position = 7816, 8112
                ]

                junction Junction3 pe
                [
                    position = 7816, 8176
                ]

                connect p_node "Short Circuit.p_node" as Connection1
                connect p_node1 "Short Circuit1.p_node" as Connection3
                connect "Short Circuit.n_node" Junction1 as Connection4
                connect Junction1 n_node as Connection5
                connect p_node2 "Short Circuit2.p_node" as Connection7
                connect p_node3 "Short Circuit3.p_node" as Connection8
                connect "Short Circuit1.n_node" Junction2 as Connection9
                connect Junction2 Junction1 as Connection10
                connect "Short Circuit2.n_node" Junction3 as Connection12
                connect Junction3 Junction2 as Connection13
                connect "Short Circuit3.n_node" Junction3 as Connection14

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Model-based OpAmp</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Requires the loading of library files. The loaded model must contain 5 terminals in the following order: non-inverting input -> inverting input -> VCC+ -> VCC- -> output.</p></body></html>"

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog
                        import os, sys, csv, io, re

                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)

                            def parse_file(self):
                                choose_file = QFileDialog()

                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')

                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False

                            def parse_models(self, file):
                                model_list = []
                                subcircuit_model_list = []
                                # 5-pin OpAmps
                                num_pins = 5
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            # Nested IFs in order to reduce the number of RegExes
                                            sub_match = re.match(sub_based, line)
                                            if sub_match:
                                                if len(sub_match.group(2).split()) == num_pins:
                                                    model_name = sub_match.group(1)
                                                    subcircuit_model_list.append(model_name)
                                                in_sub_flag  = True
                                        else:
                                            # Detect end of the subcircuit and update flag
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False

                                    mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), subcircuit_model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)

                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()

                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/op_amp_mb.svg')
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        # HEADER STOP
                        import builtins

                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7872, 7968
                size = 64, 64
            ]
        }
        [
            position = 8320, 8200
            size = 96, 104
        ]

        component Category Special {
            layout = dynamic
            component Subsystem "Dynamic SPICE component" {
                layout = dynamic

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Dynamic SPICE component</p><p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br></p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">This component is able to load and identify subcircuits in a Xyce library file. The appropriate terminals are created automatically; the positions of the terminals, however, must be configured manually.<br></br><br></br>The selection of a new subcircuit must be confirmed to enable the configuration of the terminals.</p></body></html>"

                    library {
                        label = "SPICE library"
                        widget = button
                        type = string
                        default_value = "Choose File..."
                        no_evaluate

                        CODE button_clicked
                            mdl.refresh_icon(container_handle)
                            load_and_parse_file(mdl, container_handle)
                        ENDCODE
                    }

                    model_path {
                        label = "Model file path"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    model_name {
                        label = "Model name"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        no_evaluate

                        CODE property_value_changed
                            update_component(mdl.get_parent(mdl.get_parent(prop_handle)))
                            mdl.refresh_icon(mdl.get_parent(mdl.get_parent(prop_handle)))
                        ENDCODE
                    }

                    show_netlist {
                        label = "View the netlist of the selected model"
                        widget = button
                        type = string
                        default_value = "Netlist"
                        no_evaluate

                        CODE button_clicked
                            view_netlist()
                        ENDCODE
                    }

                    configure_positions {
                        label = "Configure terminal positions"
                        widget = button
                        type = string
                        default_value = "Configure"
                        disabled
                        no_evaluate

                        CODE button_clicked
                            configuration_availability(mdl.get_parent(mdl.get_parent(prop_handle)))
                        ENDCODE
                    }

                    pin_positions {
                        label = "Pin positions"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    pin_idx {
                        label = "Pin indexes"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    pin_order {
                        label = "Pin order"
                        widget = combo
                        combo_values = "-"
                        type = string
                        default_value = "-"
                        nonvisible
                        no_evaluate
                    }

                    selected_model {
                        label = "Selected model"
                        widget = combo
                        combo_values = "None"
                        type = string
                        default_value = "None"
                        nonvisible
                        no_evaluate
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        #abc
                        from PyQt5.QtWidgets import QWidget, QFileDialog, QDialog, QApplication
                        from PyQt5 import QtCore, QtGui, QtWidgets
                        import os, sys, csv, io, re


                        mdl.disable_property(mdl.prop(item_handle, "configure_positions"))

                        models_pin_info = {}
                        positions = []

                        class FileDialog(QWidget):
                            def __init__(self, mdl, item_handle):
                                super().__init__()
                                self.title = 'Choose Library File'
                                self.left = 10
                                self.top = 10
                                self.width = 640
                                self.height = 480
                                self.mdl = mdl
                                self.item_handle = item_handle
                                self.comp_handle = mdl.get_sub_level_handle(item_handle)

                            def parse_file(self):
                                choose_file = QFileDialog()

                                file, _ = choose_file.getOpenFileName(self, 'Choose Library File', '.', 'SPICE Library files (*.lib)')

                                if file:
                                    self.parse_models(file)
                                    return True
                                else:
                                    return False

                            def parse_models(self, file):
                                subcircuit_model_list = []
                                # Find subcircuit-based models
                                sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                        flags = re.I)
                                with io.open(file) as lib:
                                    in_sub_flag = False
                                    for line in lib:
                                        if not in_sub_flag:
                                            sub_match = re.match(sub_based, line)
                                            if sub_match:
                                                # Enables when at least one match is found
                                                mdl.enable_property(mdl.prop(item_handle, "configure_positions"))
                                                mod_name = sub_match.group(1)
                                                subcircuit_model_list.append(mod_name)
                                                pin_list = sub_match.group(2).split()
                                                models_pin_info.update({mod_name:pin_list})
                                                in_sub_flag  = True
                                        else:
                                            # Detect end of the subcircuit and update flag
                                            if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                in_sub_flag = False

                                    mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), subcircuit_model_list)
                                    mdl.set_property_value(mdl.prop(item_handle, "model_path"), file)
                                    mdl.set_property_disp_value(mdl.prop(item_handle, "model_name"), subcircuit_model_list[0])

                        def load_and_parse_file(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            return ex.parse_file()

                        def parse_models_loadfile(item_handle):
                            file = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            selected_model = mdl.get_property_value(mdl.prop(item_handle, "selected_model"))
                            if not file == "-":
                                try:
                                    subcircuit_model_list = []
                                    # Find subcircuit-based models
                                    sub_based = re.compile(r"^\.SUBCKT\s+(\S+)\s+([ A-z0-9_]+)\s+(?:PARAMS)?",
                                                            flags = re.I)
                                    with io.open(file) as lib:
                                        in_sub_flag = False
                                        for line in lib:
                                            if not in_sub_flag:
                                                sub_match = re.match(sub_based, line)
                                                if sub_match:
                                                    # Enables when at least one match is found
                                                    mdl.enable_property(mdl.prop(item_handle, "configure_positions"))
                                                    mod_name = sub_match.group(1)
                                                    subcircuit_model_list.append(mod_name)
                                                    pin_list = sub_match.group(2).split()
                                                    models_pin_info.update({mod_name:pin_list})
                                                    in_sub_flag = True
                                            else:
                                                # Detect end of the subcircuit and update flag
                                                if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                    in_sub_flag = False

                                except FileNotFoundError:
                                    mdl.disable_property(mdl.prop(item_handle, "configure_positions"))

                                mdl.set_property_combo_values(mdl.prop(item_handle, "model_name"), subcircuit_model_list)


                                if selected_model in subcircuit_model_list:
                                   mdl.set_property_value(mdl.prop(item_handle, "pin_order"), ",".join(models_pin_info[selected_model]))
                                #mdl.info(mdl.get_property_value(mdl.prop(item_handle, "pin_order")))

                        def update_component(item_handle):
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            selected_model = mdl.get_property_value(model_name_prop)
                            # component = mdl.get_item(name=mdl.get_fqn(item_handle).split(".")[0])
                            component = item_handle
                            # items = mdl.get_items(parent=component)

                            items = mdl.get_items(item_handle)
                            # container_handle passes Category when opening library.
                            # This deletes all components inside the category
                            #if not str(item_handle)[0:13] == "mask: Special":
                            for it in items:
                                # Connections have no type attribute. Conns are deleted indirectly.
                                try:
                                    # Deal with junctions first
                                    if "Junction" in mdl.get_fqn(it):
                                        mdl.delete_item(it)
                                    mdl.delete_item(it)
                                except:
                                    pass


                            if not selected_model == "None":
                                mdl.set_property_value(mdl.prop(item_handle, "selected_model"), selected_model)
                                parse_models_loadfile(item_handle)
                                terminals = mdl.get_property_value(mdl.prop(item_handle,"pin_order")).split(",")
                                x0 = 8192
                                y0 = 8192
                                offset = -1000
                                count = 0
                                #### Terminals creation
                                for idx, term in enumerate(terminals):
                                    term_position = "left"
                                    # First time:
                                    positions.append(term_position)
                                    if idx == 0:
                                        first_port = mdl.create_port(
                                        name=term,
                                        parent=component,
                                        terminal_position=(term_position, "auto"),
                                        position=(x0-300, y0 + offset)
                                        )
                                        # Maintain pin position when file is saved
                                        pin_pos = mdl.get_property_value(mdl.prop(item_handle,"pin_positions")).split(",")
                                        pin_idxs = mdl.get_property_value(mdl.prop(item_handle,"pin_idx")).split(",")
                                        if not pin_pos == ["-"]:
                                            mdl.set_port_properties(first_port, terminal_position = (pin_pos[idx],int(pin_idxs[idx])))
                                        before_junc = mdl.create_junction(
                                        parent=component,
                                        position=(x0-200, y0 + offset)
                                        )
                                        mdl.create_connection(first_port, before_junc)
                                    else:
                                        port = mdl.create_port(
                                        name=term,
                                        parent=component,
                                        terminal_position=(term_position, "auto"),
                                        rotation="down",
                                        position=(x0, y0 + offset)
                                        )
                                        # Maintain pin position when file is saved
                                        pin_pos = mdl.get_property_value(mdl.prop(item_handle,"pin_positions")).split(",")
                                        pin_idxs = mdl.get_property_value(mdl.prop(item_handle,"pin_idx")).split(",")
                                        if not pin_pos == ["-"]:
                                            mdl.set_port_properties(port, terminal_position = (pin_pos[idx],int(pin_idxs[idx])))
                                        short = mdl.create_component(
                                        "core/Resistor",
                                        parent=component,
                                        position=(x0-100, y0 + offset)
                                        )
                                        junc = mdl.create_junction(
                                        parent=component,
                                        position=(x0-200, y0 + offset)
                                        )
                                        mdl.create_connection(port, mdl.term(short, "n_node"))
                                        mdl.create_connection(before_junc, junc)
                                        mdl.create_connection(junc, mdl.term(short, "p_node"))
                                        before_junc = junc
                                        offset += 75
                                    count += 1

                        def repeat_parse(mdl, item_handle):
                            ex = FileDialog(mdl, item_handle)
                            filename = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                            try:
                                return ex.parse_models(filename)
                            except FileNotFoundError:
                                mdl.info("Warning: " + mdl.get_fqn(item_handle).split(".")[0] + " model file not found!")

                        # Terminal position configuration window
                        class Ui_TerminalPositions(object):
                            def setupUi(self, TerminalPositions):
                                TerminalPositions.setObjectName("TerminalPositions")
                                TerminalPositions.resize(380, 427)
                                TerminalPositions.setMinimumSize(QtCore.QSize(380, 427))
                                TerminalPositions.setMaximumSize(QtCore.QSize(380, 427))
                                self.buttonBox = QtWidgets.QDialogButtonBox(TerminalPositions)
                                self.buttonBox.setGeometry(QtCore.QRect(110, 390, 161, 32))
                                self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
                                self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
                                self.buttonBox.button(QtWidgets.QDialogButtonBox.Ok).setText('OK')
                                self.buttonBox.setObjectName("buttonBox")
                                self.groupBox = QtWidgets.QGroupBox(TerminalPositions)
                                self.groupBox.setGeometry(QtCore.QRect(10, 10, 361, 111))
                                self.groupBox.setLocale(QtCore.QLocale(QtCore.QLocale.English, QtCore.QLocale.UnitedStates))
                                self.groupBox.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
                                self.groupBox.setFlat(False)
                                self.groupBox.setCheckable(False)
                                self.groupBox.setObjectName("groupBox")
                                self.comboBox = QtWidgets.QComboBox(self.groupBox)
                                self.comboBox.setGeometry(QtCore.QRect(44, 60, 141, 22))
                                self.comboBox.setObjectName("comboBox")
                                self.label = QtWidgets.QLabel(self.groupBox)
                                self.label.setGeometry(QtCore.QRect(50, 40, 131, 20))
                                self.label.setAlignment(QtCore.Qt.AlignCenter)
                                self.label.setObjectName("label")
                                self.widget = QtWidgets.QWidget(self.groupBox)
                                self.widget.setGeometry(QtCore.QRect(240, 20, 81, 91))
                                self.widget.setMinimumSize(QtCore.QSize(81, 91))
                                self.widget.setMaximumSize(QtCore.QSize(81, 91))
                                self.widget.setObjectName("widget")
                                self.pushButton_left = QtWidgets.QPushButton(self.widget)
                                self.pushButton_left.setGeometry(QtCore.QRect(10, 40, 21, 21))
                                self.pushButton_left.setObjectName("pushButton_left")
                                self.pushButton_down = QtWidgets.QPushButton(self.widget)
                                self.pushButton_down.setGeometry(QtCore.QRect(30, 60, 21, 21))
                                self.pushButton_down.setObjectName("pushButton_down")
                                self.pushButton_up = QtWidgets.QPushButton(self.widget)
                                self.pushButton_up.setGeometry(QtCore.QRect(30, 20, 21, 21))
                                self.pushButton_up.setObjectName("pushButton_up")
                                self.label_3 = QtWidgets.QLabel(self.widget)
                                self.label_3.setGeometry(QtCore.QRect(10, 0, 61, 20))
                                self.label_3.setAlignment(QtCore.Qt.AlignCenter)
                                self.label_3.setObjectName("label_3")
                                self.label_cur_pos = QtWidgets.QLabel(self.widget)
                                self.label_cur_pos.setGeometry(QtCore.QRect(30, 40, 21, 21))
                                font = QtGui.QFont()
                                font.setBold(True)
                                font.setWeight(75)
                                self.label_cur_pos.setFont(font)
                                self.label_cur_pos.setText("")
                                self.label_cur_pos.setAlignment(QtCore.Qt.AlignCenter)
                                self.label_cur_pos.setObjectName("label_cur_pos")
                                self.pushButton_right = QtWidgets.QPushButton(self.widget)
                                self.pushButton_right.setGeometry(QtCore.QRect(50, 40, 21, 21))
                                self.pushButton_right.setObjectName("pushButton_right")
                                self.groupBox_2 = QtWidgets.QGroupBox(TerminalPositions)
                                self.groupBox_2.setGeometry(QtCore.QRect(10, 130, 361, 261))
                                self.groupBox_2.setObjectName("groupBox_2")
                                self.listWidget_up = QtWidgets.QListWidget(self.groupBox_2)
                                self.listWidget_up.setGeometry(QtCore.QRect(130, 30, 100, 90))
                                self.listWidget_up.setObjectName("listWidget_up")
                                self.listWidget_right = QtWidgets.QListWidget(self.groupBox_2)
                                self.listWidget_right.setGeometry(QtCore.QRect(240, 90, 100, 90))
                                self.listWidget_right.setObjectName("listWidget_right")
                                self.listWidget_down = QtWidgets.QListWidget(self.groupBox_2)
                                self.listWidget_down.setGeometry(QtCore.QRect(130, 140, 100, 90))
                                self.listWidget_down.setObjectName("listWidget_down")
                                self.listWidget_left = QtWidgets.QListWidget(self.groupBox_2)
                                self.listWidget_left.setGeometry(QtCore.QRect(20, 90, 100, 90))
                                self.listWidget_left.setObjectName("listWidget_left")
                                self.label_2 = QtWidgets.QLabel(self.groupBox_2)
                                self.label_2.setGeometry(QtCore.QRect(255, 220, 71, 20))
                                self.label_2.setAlignment(QtCore.Qt.AlignCenter)
                                self.label_2.setObjectName("label_2")
                                self.label_missing_terms = QtWidgets.QLabel(self.groupBox_2)
                                self.label_missing_terms.setGeometry(QtCore.QRect(10, 240, 191, 20))
                                self.label_missing_terms.setAlignment(QtCore.Qt.AlignCenter)
                                self.label_missing_terms.setObjectName("label_missing_terms")
                                self.toolButton_idx_up = QtWidgets.QToolButton(self.groupBox_2)
                                self.toolButton_idx_up.setGeometry(QtCore.QRect(330, 210, 21, 21))
                                self.toolButton_idx_up.setText("")
                                self.toolButton_idx_up.setObjectName("toolButton_idx_up")
                                self.toolButton_idx_down = QtWidgets.QToolButton(self.groupBox_2)
                                self.toolButton_idx_down.setGeometry(QtCore.QRect(330, 230, 21, 21))
                                self.toolButton_idx_down.setText("")
                                self.toolButton_idx_down.setObjectName("toolButton_idx_down")

                                self.retranslateUi(TerminalPositions)
                                self.buttonBox.accepted.connect(TerminalPositions.accept)
                                self.buttonBox.rejected.connect(TerminalPositions.reject)
                                QtCore.QMetaObject.connectSlotsByName(TerminalPositions)

                            def retranslateUi(self, TerminalPositions):
                                _translate = QtCore.QCoreApplication.translate
                                TerminalPositions.setWindowTitle(_translate("TerminalPositions", "Terminal positions configuration"))
                                self.groupBox.setTitle(_translate("TerminalPositions", "Configure positions for model"))
                                self.label.setText(_translate("TerminalPositions", "Terminal"))
                                self.pushButton_left.setText(_translate("TerminalPositions", "L"))
                                self.pushButton_down.setText(_translate("TerminalPositions", "D"))
                                self.pushButton_up.setText(_translate("TerminalPositions", "U"))
                                self.label_3.setText(_translate("TerminalPositions", "Position"))
                                self.pushButton_right.setText(_translate("TerminalPositions", "R"))
                                self.groupBox_2.setTitle(_translate("TerminalPositions", "New positions"))
                                self.label_2.setText(_translate("TerminalPositions", "Change index"))
                                self.label_missing_terms.setText(_translate("TerminalPositions", "Some terminals are not yet configured"))

                        class TerminalPositionsDialog(QDialog, Ui_TerminalPositions):
                            def __init__(self):
                                super().__init__()
                                self.setupUi(self)
                                self.added_terminals = []

                                # Some extra configs
                                self.toolButton_idx_up.setArrowType(QtCore.Qt.UpArrow)
                                self.toolButton_idx_down.setArrowType(QtCore.Qt.DownArrow)
                                self.label_missing_terms.setStyleSheet("color: red")

                                # Must configure everything before OK is available
                                self.buttonBox.buttons()[0].setEnabled(False)

                                # Connect button functions
                                self.pushButton_left.clicked.connect(self.add_to_list_left)
                                self.pushButton_right.clicked.connect(self.add_to_list_right)
                                self.pushButton_up.clicked.connect(self.add_to_list_up)
                                self.pushButton_down.clicked.connect(self.add_to_list_down)
                                self.toolButton_idx_up.clicked.connect(self.index_up)
                                self.toolButton_idx_down.clicked.connect(self.index_down)

                                # Connect QListWidget clicks
                                self.listWidget_up.itemClicked.connect(self.clicked_on_list_up)
                                self.listWidget_down.itemClicked.connect(self.clicked_on_list_down)
                                self.listWidget_left.itemClicked.connect(self.clicked_on_list_left)
                                self.listWidget_right.itemClicked.connect(self.clicked_on_list_right)

                            def test_ok_available(self, inlist):
                                if len(self.added_terminals) == self.comboBox.count():
                                    self.buttonBox.buttons()[0].setEnabled(True)
                                    self.label_missing_terms.setText("")
                                # For faster adding of Terminals
                                if not inlist:
                                    i = 1
                                    while i < self.comboBox.count():
                                        if not self.comboBox.currentText() in self.added_terminals:
                                            break
                                        else:
                                            self.comboBox.setCurrentIndex(i)
                                        i = i + 1

                            def add_to_combo(self, terminals):
                                self.comboBox.addItems(terminals)

                            def display_selected_model(self, model):
                                self.groupBox.setTitle("Configure positions for model " + model)

                            def get_lists(self):
                                rg_left = range(self.listWidget_left.count())
                                left_list = [str(self.listWidget_left.item(i).text()) for i in rg_left]

                                rg_right = range(self.listWidget_right.count())
                                right_list = [str(self.listWidget_right.item(i).text()) for i in rg_right]

                                rg_up = range(self.listWidget_up.count())
                                up_list = [str(self.listWidget_up.item(i).text()) for i in rg_up]

                                rg_down = range(self.listWidget_down.count())
                                down_list = [str(self.listWidget_down.item(i).text()) for i in rg_down]

                                return {"left":left_list, "right":right_list,
                                                    "top":up_list, "bottom":down_list}

                            def return_dict(self):
                                return self.get_lists()

                            def in_list_check(self):

                                terminal = self.comboBox.currentText()
                                lists = self.get_lists()
                                inlist = False

                                for pos in lists:
                                    if terminal in lists[pos]:
                                        inlist = True
                                        # Cannot duplicate
                                        if pos == "left":
                                            item = self.listWidget_left.findItems(terminal, QtCore.Qt.MatchExactly)[0]
                                            row = self.listWidget_left.row(item)
                                            self.listWidget_left.takeItem(row)
                                        elif pos == "right":
                                            item = self.listWidget_right.findItems(terminal, QtCore.Qt.MatchExactly)[0]
                                            row = self.listWidget_right.row(item)
                                            self.listWidget_right.takeItem(row)
                                        elif pos == "top":
                                            item = self.listWidget_up.findItems(terminal, QtCore.Qt.MatchExactly)[0]
                                            row = self.listWidget_up.row(item)
                                            self.listWidget_up.takeItem(row)
                                        elif pos == "bottom":
                                            item = self.listWidget_down.findItems(terminal, QtCore.Qt.MatchExactly)[0]
                                            row = self.listWidget_down.row(item)
                                            self.listWidget_down.takeItem(row)

                                return (terminal, inlist)

                            def add_to_list_left(self, position):
                                terminal, inlist = self.in_list_check()
                                self.listWidget_left.addItem(terminal)
                                if terminal not in self.added_terminals:
                                    self.added_terminals.append(terminal)
                                self.test_ok_available(inlist)

                            def add_to_list_right(self, position):
                                terminal, inlist = self.in_list_check()
                                self.listWidget_right.addItem(terminal)
                                if terminal not in self.added_terminals:
                                    self.added_terminals.append(terminal)
                                self.test_ok_available(inlist)

                            def add_to_list_up(self, position):
                                terminal, inlist = self.in_list_check()
                                self.listWidget_up.addItem(terminal)
                                if terminal not in self.added_terminals:
                                    self.added_terminals.append(terminal)
                                self.test_ok_available(inlist)

                            def add_to_list_down(self, position):
                                terminal, inlist = self.in_list_check()
                                self.listWidget_down.addItem(terminal)
                                if terminal not in self.added_terminals:
                                    self.added_terminals.append(terminal)
                                self.test_ok_available(inlist)

                            def index_up(self):
                                selected_term = self.comboBox.currentText()
                                if self.listWidget_left.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_left
                                elif self.listWidget_right.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_right
                                elif self.listWidget_up.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_up
                                elif self.listWidget_down.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_down
                                currentRow = list_widget.currentRow()
                                currentItem = list_widget.takeItem(currentRow)
                                list_widget.insertItem(currentRow - 1, currentItem)
                                if currentRow - 1 >= 0:
                                    list_widget.setCurrentRow(currentRow - 1)
                                else:
                                    list_widget.setCurrentRow(0)

                            def index_down(self):
                                selected_term = self.comboBox.currentText()
                                if self.listWidget_left.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_left
                                elif self.listWidget_right.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_right
                                elif self.listWidget_up.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_up
                                elif self.listWidget_down.findItems(selected_term, QtCore.Qt.MatchExactly):
                                    list_widget = self.listWidget_down
                                currentRow = list_widget.currentRow()
                                currentItem = list_widget.takeItem(currentRow)
                                list_widget.insertItem(currentRow + 1, currentItem)
                                if currentRow + 1 < list_widget.count() - 1:
                                    list_widget.setCurrentRow(currentRow + 1)
                                else:
                                    list_widget.setCurrentRow(list_widget.count()-1)

                            def clicked_on_list_left(self):
                                row = self.listWidget_left.currentRow()
                                term = self.listWidget_left.item(row).text()
                                idx = self.comboBox.findText(term, QtCore.Qt.MatchExactly)
                                self.comboBox.setCurrentIndex(idx)

                            def clicked_on_list_right(self):
                                row = self.listWidget_right.currentRow()
                                term = self.listWidget_right.item(row).text()
                                idx = self.comboBox.findText(term, QtCore.Qt.MatchExactly)
                                self.comboBox.setCurrentIndex(idx)

                            def clicked_on_list_up(self):
                                row = self.listWidget_up.currentRow()
                                term = self.listWidget_up.item(row).text()
                                idx = self.comboBox.findText(term, QtCore.Qt.MatchExactly)
                                self.comboBox.setCurrentIndex(idx)

                            def clicked_on_list_down(self):
                                row = self.listWidget_down.currentRow()
                                term = self.listWidget_down.item(row).text()
                                idx = self.comboBox.findText(term, QtCore.Qt.MatchExactly)
                                self.comboBox.setCurrentIndex(idx)

                        class Ui_ViewNetlist(object):
                            def setupUi(self, ViewNetlist):
                                ViewNetlist.setObjectName("ViewNetlist")
                                ViewNetlist.resize(800, 600)
                                self.gridLayout = QtWidgets.QGridLayout(ViewNetlist)
                                self.gridLayout.setObjectName("gridLayout")
                                self.textBrowser_netlist = QtWidgets.QTextBrowser(ViewNetlist)
                                self.textBrowser_netlist.setObjectName("textBrowser_netlist")
                                self.gridLayout.addWidget(self.textBrowser_netlist, 0, 0, 2, 1)
                                spacerItem = QtWidgets.QSpacerItem(20, 384, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
                                self.gridLayout.addItem(spacerItem, 1, 1, 1, 1)

                                self.retranslateUi(ViewNetlist)
                                QtCore.QMetaObject.connectSlotsByName(ViewNetlist)

                            def retranslateUi(self, ViewNetlist):
                                _translate = QtCore.QCoreApplication.translate
                                ViewNetlist.setWindowTitle(_translate("ViewNetlist", "View netlist"))

                        class NetlistWindow(QDialog, Ui_ViewNetlist):
                            def __init__(self):
                                super().__init__()
                                self.setupUi(self)
                                self.show_netlist()


                            def show_netlist(self):
                                self.textBrowser_netlist.clear()
                                selected_model = mdl.get_property_disp_value(mdl.prop(item_handle, "model_name"))
                                self.textBrowser_netlist.append(f"""<body>
                                        <h3 style='color:black; margin: 2'>Showing netlist for model</h3>
                                        <h2 style='color:red; margin: 4'>{selected_model}</h2>
                                        </body>""")
                                self.textBrowser_netlist.setCurrentFont(QtGui.QFont("Courier New"))
                                for line in self.get_model_lines():
                                    self.textBrowser_netlist.append(line[:-1])
                                curs = self.textBrowser_netlist.textCursor()
                                self.textBrowser_netlist.moveCursor(QtGui.QTextCursor.Start)

                            def get_model_lines(self):

                                file = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                                selected_model = mdl.get_property_disp_value(mdl.prop(item_handle, "model_name"))

                                regex_model = re.compile(fr"^\.SUBCKT {selected_model} ", flags = re.I)
                                model_lines = []

                                try:
                                    with open(file) as lib:
                                        in_model_flag = False
                                        for line in lib:
                                            if not in_model_flag:
                                                mod_match = re.match(regex_model, line)
                                                if mod_match:
                                                    model_lines.append(line)
                                                    in_model_flag  = True
                                            else:
                                                # Detect end of the subcircuit and update flag
                                                if re.match(r".[Ee][Nn][Dd][Ss]", line):
                                                    model_lines.append(line)
                                                    in_model_flag = False
                                                else:
                                                    model_lines.append(line)

                                    return model_lines

                                except FileNotFoundError:
                                    mdl.info("Model file not found")
                                    return ["Model file not found."]


                        def configuration_availability(item_handle):
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            configure_prop = mdl.prop(item_handle, "configure_positions")
                            disp = mdl.get_property_disp_value(model_name_prop)
                            val = mdl.get_property_value(model_name_prop)
                            if val == disp:
                                configure_terminal_positions(item_handle)
                            else:
                                mdl.info("Please confirm of cancel the model change before configuring the terminal positions.")

                        def configure_terminal_positions(item_handle):
                            pin_pos_dict = {}
                            pin_pos_list = []
                            pin_idx_list = []
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            selected_model = mdl.get_property_value(model_name_prop)
                            # Load pin information
                            terminals = mdl.get_property_value(mdl.prop(item_handle,"pin_order")).split(",")
                            conf = TerminalPositionsDialog()
                            # List available terminals in the ComboBox
                            conf.comboBox.addItems(terminals)
                            # Display the model being edited
                            conf.display_selected_model(str(selected_model))
                            # Run the GUI and get the new terminal positons
                            if conf.exec_():
                                new_term_positions = conf.return_dict()

                                # Update terminal positions

                                # Get all port handles
                                port_handles = []
                                # component = mdl.get_item(name=mdl.get_fqn(item_handle).split(".")[0])
                                # all_handles = mdl.get_items(component)
                                all_handles = mdl.get_items(item_handle)

                                for h in all_handles:
                                    try:
                                        if h.item_type == "port":
                                            port_handles.append(h)
                                    except: pass


                                # Go through every terminal of the new_term_positions dict and compare
                                # to the each port name (in port_handles). If the name is the same, set
                                # the port position as the key of the dict (up, down, left, right)

                                for key in new_term_positions:
                                    for term_name in new_term_positions[key]:
                                        for ph in port_handles:
                                            port_name = mdl.get_fqn(ph).split(".")[-1]
                                            if term_name == port_name:
                                                new_pos = (key, new_term_positions[key].index(term_name) + 1)
                                                mdl.set_port_properties(ph, terminal_position = new_pos)
                                                pin_pos_dict.update({term_name:(new_pos[0],str(new_pos[1]))})

                            for term in terminals:
                                pin_pos_list.append(pin_pos_dict[term][0])
                                pin_idx_list.append(pin_pos_dict[term][1])


                            mdl.set_property_value(mdl.prop(item_handle, "pin_positions"), ",".join(pin_pos_list))
                            mdl.set_property_value(mdl.prop(item_handle, "pin_idx"), ",".join(pin_idx_list))

                        def view_netlist():
                            netlistwindow = NetlistWindow()
                            netlistwindow.exec_()


                        parse_models_loadfile(item_handle)
                        #mdl.set_property_value(a)
                    ENDCODE

                    CODE define_icon
                        import builtins

                        model_name_prop = mdl.prop(item_handle, "model_name")
                        model_name = mdl.get_property_value(model_name_prop)
                        model_path_prop = mdl.prop(item_handle, "model_path")
                        model_path = mdl.get_property_value(model_path_prop)

                        try:
                            builtins.open(model_path)
                            if not model_name == "None":
                                 mdl.set_color(item_handle, "blue")
                                 mdl.disp_component_icon_text(item_handle, " " + model_name, relpos_x = 0.5, relpos_y = 0.5, size = 8)
                        except:
                            mdl.set_color(item_handle, "red")
                            mdl.disp_component_icon_text(item_handle, "Model", relpos_x = 0.5, relpos_y = 0.5, size = 8)
                    ENDCODE

                    CODE pre_compile
                        # HEADER START
                        library = mdl.get_property_value(mdl.prop(item_handle, "library"))
                        model_path = mdl.get_property_value(mdl.prop(item_handle, "model_path"))
                        model_name = mdl.get_property_value(mdl.prop(item_handle, "model_name"))
                        show_netlist = mdl.get_property_value(mdl.prop(item_handle, "show_netlist"))
                        configure_positions = mdl.get_property_value(mdl.prop(item_handle, "configure_positions"))
                        pin_positions = mdl.get_property_value(mdl.prop(item_handle, "pin_positions"))
                        pin_idx = mdl.get_property_value(mdl.prop(item_handle, "pin_idx"))
                        pin_order = mdl.get_property_value(mdl.prop(item_handle, "pin_order"))
                        selected_model = mdl.get_property_value(mdl.prop(item_handle, "selected_model"))
                        # HEADER STOP
                        import builtins

                        try:
                            model_path_prop = mdl.prop(item_handle, "model_path")
                            model_path = mdl.get_property_value(model_path_prop)
                            builtins.open(model_path)
                        except:
                            model_name_prop = mdl.prop(item_handle, "model_name")
                            model_name = mdl.get_property_value(model_name_prop)
                            name = mdl.get_fqn(item_handle).split(".")[0]
                            mdl.refresh_icon(item_handle)
                            raise ValueError("\n\n" + name + " MODEL FILE NOT FOUND")
                    ENDCODE
                }
            }
            [
                position = 7960, 8320
                size = 168, 136
            ]

            component Subsystem XyceSim {
                layout = dynamic

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Perform the simulation using the Xyce solver.</p></body></html>"

                    sim_time {
                        label = "Simulation time"
                        widget = edit
                        type = generic
                        default_value = "0.1ms"
                        no_evaluate
                    }

                    max_ts {
                        label = "Maximum time-step"
                        widget = edit
                        type = generic
                        default_value = "1e-7"
                        no_evaluate
                    }

                    start_sim {
                        widget = button
                        type = string
                        default_value = "Start simulation"
                        no_evaluate

                        CODE button_clicked
                            sim_with_xyce(container_handle)
                        ENDCODE
                    }

                    open_sa {
                        widget = button
                        type = string
                        default_value = "Plot"
                        no_evaluate

                        CODE button_clicked
                            open_sa()
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE init
                        from PyQt5.QtWidgets import QWidget, QFileDialog, QDialog, QApplication
                        from PyQt5 import QtCore, QtGui, QtWidgets
                        import sys, os, re

                        keep_open = {}

                        def sim_with_xyce(mask_handle):

                            try:
                              ih = mdl.get_parent(mask_handle) # Component handle
                            except:
                              mdl.info("If this XyceSim component was copied from another model, please save and reload this model or add a new XyceSim from the Library Explorer.")
                              raise Exception()

                            sim_params_dict = {}

                            sim_time = mdl.get_property_disp_value(mdl.prop(ih, "sim_time"))
                            max_ts = mdl.get_property_disp_value(mdl.prop(ih, "max_ts"))

                            sim_params_dict['sim_time'] = sim_time
                            sim_params_dict['max_ts'] = max_ts

                            # Export to JSON to the Target Files folder
                            mdl.export_model_to_json()

                            # Get the path to the exported JSON
                            mdlfile = mdl.get_model_file_path()
                            mdlfile_name = mdlfile.split('\\')[-1].split('.')[0]
                            mdlfile_folder = '/'.join(mdlfile.split('\\')[0:-1])
                            mdlfile_target_folder = mdlfile_folder + '/' + mdlfile_name + ' Target files'
                            json_file_path = mdlfile_target_folder + '/' + mdlfile_name + '.json'

                            # Xyce converter path
                            try:
                                xycesim_path = os.environ['TYPHOON_XYCE_INTERFACE']
                            except:
                                raise Exception("The TYPHOON_XYCE_INTERFACE system environment variable could not be found. "\
                                                "Make sure Control Center is restarted after running install.bat in the xyce-typhoon-hil-interface folder.")

                            if json_file_path:
                                os.chdir(xycesim_path)
                                sys.path.append(xycesim_path)
                                sys.path.append(xycesim_path+'/gui')
                                sys.path.append(xycesim_path+'/schematic_converter')
                                try:
                                    from minimalistic_gui import XyceOutput
                                    import tse2xyce
                                except:
                                    mdl.info("Could not find the converter tool. Make sure Control Center is restarted after running install.bat in the xyce-typhoon-hil-interface folder.")
                                    raise Exception()
                                mainwindow = XyceOutput(json_file_path, sim_params_dict)
                                mainwindow.show()
                                keep_open.update({'xycewin':mainwindow})

                        def start_sim(mask_handle):
                            sim_with_xyce(mask_handle)

                        def open_sa():
                            if keep_open.get('xycewin'):
                                keep_open['xycewin'].plot_data()
                            else:
                                mdl.info('No plot data.')
                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/xyce_logo.png')
                    ENDCODE

                    CODE pre_compile
                    ENDCODE

                    CODE post_resolve
                    ENDCODE
                }
            }
            [
                position = 7952, 8184
                size = 112, 56
            ]

            component Subsystem NodeID {
                layout = static
                component src_ground gnd1 {
                }
                [
                    position = 7848, 8096
                    rotation = left
                ]

                component el_open "Open Circuit1" {
                    circuit_connector = "true"
                }
                [
                    position = 7760, 8096
                    rotation = down
                ]

                port node {
                    position = top center
                    kind = pe
                }
                [
                    position = 7680, 8096
                    rotation = down
                    hide_name = True
                    scale = -1, 1
                ]

                connect gnd1.node "Open Circuit1.p_node" as Connection1
                connect "Open Circuit1.n_node" node as Connection2

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Identify the wire/node in the circuit.</p><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br></br>Nodes with the same name become connected.</p></body></html>"

                    node_id {
                        label = "Node Identifier"
                        widget = edit
                        type = generic
                        default_value = "names"
                        no_evaluate

                        CODE property_value_changed
                            mdl.refresh_icon(container_handle)
                        ENDCODE
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/node_id_test.svg')

                        node_id = mdl.get_property_value(mdl.prop(item_handle, "node_id"))
                        mdl.set_color(item_handle, "green")

                        mdl.disp_component_icon_text(item_handle, node_id, relpos_x = 0.5, relpos_y = 0.85, size = 6)
                    ENDCODE
                }
            }
            [
                position = 7824, 8336
                hide_name = True
                size = 32, 32
            ]
        }
        [
            position = 7872, 8208
            size = 96, 104
        ]

        component Category "Behavioral Digital" {
            layout = dynamic
            component Subsystem Delay_ {
                layout = dynamic
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                port in {
                    position = left:auto
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port out {
                    position = right:auto
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.n_node" out as Connection2
                connect in "Short Circuit.p_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">Time delay</p></body></html>"

                    CHI {
                        label = "CHI"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLO {
                        label = "CLO"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLOAD {
                        label = "CLOAD"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    DELAY {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "1e-5"
                        unit = "s"
                    }

                    RLOAD {
                        label = "RLOAD"
                        widget = edit
                        type = generic
                        default_value = "1e4"
                        nonvisible
                        no_evaluate
                    }

                    S0RHI {
                        label = "S0RHI"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S0RLO {
                        label = "S0RLO"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0TSW {
                        label = "S0TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S0VHI {
                        label = "S0VHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0VLO {
                        label = "S0VLO"
                        widget = edit
                        type = generic
                        default_value = "-100"
                        nonvisible
                        no_evaluate
                    }

                    S1RHI {
                        label = "S1RHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S1RLO {
                        label = "S1RLO"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S1TSW {
                        label = "S1TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S1VHI {
                        label = "S1VHI"
                        widget = edit
                        type = generic
                        default_value = "100"
                        nonvisible
                        no_evaluate
                    }

                    S1VLO {
                        label = "S1VLO"
                        widget = edit
                        type = generic
                        default_value = "0.9"
                        nonvisible
                        no_evaluate
                    }

                    type {
                        label = "type"
                        widget = combo
                        combo_values = "BUF"
                        type = string
                        default_value = "BUF"
                        nonvisible
                        no_evaluate
                    }

                    output_voltage {
                        label = "output_voltage"
                        widget = edit
                        type = generic
                        default_value = "1"
                        nonvisible
                        no_evaluate
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7784, 8224
                size = 64, 64
            ]

            component Subsystem NOT {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                port in {
                    position = left center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.n_node" out as Connection2
                connect in "Short Circuit.p_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">NOT logic</p></body></html>"

                    CHI {
                        label = "CHI"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLO {
                        label = "CLO"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLOAD {
                        label = "CLOAD"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    DELAY {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "s"
                        nonvisible
                        no_evaluate
                    }

                    RLOAD {
                        label = "RLOAD"
                        widget = edit
                        type = generic
                        default_value = "1e4"
                        nonvisible
                        no_evaluate
                    }

                    S0RHI {
                        label = "S0RHI"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S0RLO {
                        label = "S0RLO"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0TSW {
                        label = "S0TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S0VHI {
                        label = "Maximum low-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "V"
                    }

                    S0VLO {
                        label = "S0VLO"
                        widget = edit
                        type = generic
                        default_value = "-100"
                        nonvisible
                        no_evaluate
                    }

                    S1RHI {
                        label = "S1RHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S1RLO {
                        label = "S1RLO"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S1TSW {
                        label = "S1TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S1VHI {
                        label = "S1VHI"
                        widget = edit
                        type = generic
                        default_value = "100"
                        nonvisible
                        no_evaluate
                    }

                    S1VLO {
                        label = "Minimum high-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.9"
                        unit = "V"
                    }

                    type {
                        label = "type"
                        widget = combo
                        combo_values = "INV"
                        type = string
                        default_value = "INV"
                        nonvisible
                        no_evaluate
                    }

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/behavioral_inverter.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7944, 8072
                size = 64, 64
            ]

            component Subsystem AND {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7912, 7992
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7912, 8112
                ]

                port in1 {
                    position = -32.0, -16.0
                    kind = pe
                }
                [
                    position = 7776, 7992
                    hide_name = True
                ]

                port out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8080, 8056
                    hide_name = True
                    scale = -1, 1
                ]

                port in2 {
                    position = -32.0, 16.0
                    kind = pe
                }
                [
                    position = 7776, 8112
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 8000, 8056
                ]

                connect in1 "Short Circuit.p_node" as Connection1
                connect in2 "Short Circuit1.p_node" as Connection3
                connect "Short Circuit.n_node" Junction1 as Connection4
                [
                    position = 0, 0
                    breakpoints = 8000, 7992
                ]
                connect Junction1 out as Connection5
                [
                    position = 0, 0
                    breakpoints = 8000, 8064
                ]
                connect "Short Circuit1.n_node" Junction1 as Connection6

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">AND logic</p></body></html>"

                    CHI {
                        label = "CHI"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLO {
                        label = "CLO"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLOAD {
                        label = "CLOAD"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    DELAY {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "s"
                        nonvisible
                        no_evaluate
                    }

                    RLOAD {
                        label = "RLOAD"
                        widget = edit
                        type = generic
                        default_value = "1e4"
                        nonvisible
                        no_evaluate
                    }

                    S0RHI {
                        label = "S0RHI"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S0RLO {
                        label = "S0RLO"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0TSW {
                        label = "S0TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S0VHI {
                        label = "Maximum low-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "V"
                    }

                    S0VLO {
                        label = "S0VLO"
                        widget = edit
                        type = generic
                        default_value = "-100"
                        nonvisible
                        no_evaluate
                    }

                    S1RHI {
                        label = "S1RHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S1RLO {
                        label = "S1RLO"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S1TSW {
                        label = "S1TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S1VHI {
                        label = "S1VHI"
                        widget = edit
                        type = generic
                        default_value = "100"
                        nonvisible
                        no_evaluate
                    }

                    S1VLO {
                        label = "Minimum high-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.9"
                        unit = "V"
                    }

                    type {
                        label = "type"
                        widget = combo
                        combo_values = "AND"
                        type = string
                        default_value = "AND"
                        nonvisible
                        no_evaluate
                    }

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/behavioral_and.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7944, 8176
                size = 64, 64
            ]

            component Subsystem NAND {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7912, 7992
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7912, 8112
                ]

                port in1 {
                    position = -32.0, -16.0
                    kind = pe
                }
                [
                    position = 7776, 7992
                    hide_name = True
                ]

                port out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8080, 8056
                    hide_name = True
                    scale = -1, 1
                ]

                port in2 {
                    position = -32.0, 16.0
                    kind = pe
                }
                [
                    position = 7776, 8112
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 8000, 8056
                ]

                connect in1 "Short Circuit.p_node" as Connection1
                connect in2 "Short Circuit1.p_node" as Connection3
                connect "Short Circuit.n_node" Junction1 as Connection4
                [
                    position = 0, 0
                    breakpoints = 8000, 7992
                ]
                connect Junction1 out as Connection5
                [
                    position = 0, 0
                    breakpoints = 8000, 8064
                ]
                connect "Short Circuit1.n_node" Junction1 as Connection6

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">NAND logic</p></body></html>"

                    CHI {
                        label = "CHI"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLO {
                        label = "CLO"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLOAD {
                        label = "CLOAD"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    DELAY {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "s"
                        nonvisible
                        no_evaluate
                    }

                    RLOAD {
                        label = "RLOAD"
                        widget = edit
                        type = generic
                        default_value = "1e4"
                        nonvisible
                        no_evaluate
                    }

                    S0RHI {
                        label = "S0RHI"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S0RLO {
                        label = "S0RLO"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0TSW {
                        label = "S0TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S0VHI {
                        label = "Maximum low-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "V"
                    }

                    S0VLO {
                        label = "S0VLO"
                        widget = edit
                        type = generic
                        default_value = "-100"
                        nonvisible
                        no_evaluate
                    }

                    S1RHI {
                        label = "S1RHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S1RLO {
                        label = "S1RLO"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S1TSW {
                        label = "S1TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S1VHI {
                        label = "S1VHI"
                        widget = edit
                        type = generic
                        default_value = "100"
                        nonvisible
                        no_evaluate
                    }

                    S1VLO {
                        label = "Minimum high-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.9"
                        unit = "V"
                    }

                    type {
                        label = "type"
                        widget = combo
                        combo_values = "NAND"
                        type = string
                        default_value = "NAND"
                        nonvisible
                        no_evaluate
                    }

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/behavioral_nand.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8056, 8176
                size = 64, 64
            ]

            component Subsystem OR {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7912, 7992
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7912, 8112
                ]

                port in1 {
                    position = -32.0, -16.0
                    kind = pe
                }
                [
                    position = 7776, 7992
                    hide_name = True
                ]

                port out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8080, 8056
                    hide_name = True
                    scale = -1, 1
                ]

                port in2 {
                    position = -32.0, 16.0
                    kind = pe
                }
                [
                    position = 7776, 8112
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 8000, 8056
                ]

                connect in1 "Short Circuit.p_node" as Connection1
                connect in2 "Short Circuit1.p_node" as Connection3
                connect "Short Circuit.n_node" Junction1 as Connection4
                [
                    position = 0, 0
                    breakpoints = 8000, 7992
                ]
                connect Junction1 out as Connection5
                [
                    position = 0, 0
                    breakpoints = 8000, 8064
                ]
                connect "Short Circuit1.n_node" Junction1 as Connection6

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">OR logic</p></body></html>"

                    CHI {
                        label = "CHI"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLO {
                        label = "CLO"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLOAD {
                        label = "CLOAD"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    DELAY {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "s"
                        nonvisible
                        no_evaluate
                    }

                    RLOAD {
                        label = "RLOAD"
                        widget = edit
                        type = generic
                        default_value = "1e4"
                        nonvisible
                        no_evaluate
                    }

                    S0RHI {
                        label = "S0RHI"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S0RLO {
                        label = "S0RLO"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0TSW {
                        label = "S0TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S0VHI {
                        label = "Maximum low-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "V"
                    }

                    S0VLO {
                        label = "S0VLO"
                        widget = edit
                        type = generic
                        default_value = "-100"
                        nonvisible
                        no_evaluate
                    }

                    S1RHI {
                        label = "S1RHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S1RLO {
                        label = "S1RLO"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S1TSW {
                        label = "S1TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S1VHI {
                        label = "S1VHI"
                        widget = edit
                        type = generic
                        default_value = "100"
                        nonvisible
                        no_evaluate
                    }

                    S1VLO {
                        label = "Minimum high-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.9"
                        unit = "V"
                    }

                    type {
                        label = "type"
                        widget = combo
                        combo_values = "OR"
                        type = string
                        default_value = "OR"
                        nonvisible
                        no_evaluate
                    }

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/behavioral_or.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7944, 8272
                size = 64, 64
            ]

            component Subsystem NOR {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7912, 7992
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7912, 8112
                ]

                port in1 {
                    position = -32.0, -16.0
                    kind = pe
                }
                [
                    position = 7776, 7992
                    hide_name = True
                ]

                port out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8080, 8056
                    hide_name = True
                    scale = -1, 1
                ]

                port in2 {
                    position = -32.0, 16.0
                    kind = pe
                }
                [
                    position = 7776, 8112
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 8000, 8056
                ]

                connect in1 "Short Circuit.p_node" as Connection1
                connect in2 "Short Circuit1.p_node" as Connection3
                connect "Short Circuit.n_node" Junction1 as Connection4
                [
                    position = 0, 0
                    breakpoints = 8000, 7992
                ]
                connect Junction1 out as Connection5
                [
                    position = 0, 0
                    breakpoints = 8000, 8064
                ]
                connect "Short Circuit1.n_node" Junction1 as Connection6

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">NOR logic</p></body></html>"

                    CHI {
                        label = "CHI"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLO {
                        label = "CLO"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLOAD {
                        label = "CLOAD"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    DELAY {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "s"
                        nonvisible
                        no_evaluate
                    }

                    RLOAD {
                        label = "RLOAD"
                        widget = edit
                        type = generic
                        default_value = "1e4"
                        nonvisible
                        no_evaluate
                    }

                    S0RHI {
                        label = "S0RHI"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S0RLO {
                        label = "S0RLO"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0TSW {
                        label = "S0TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S0VHI {
                        label = "Maximum low-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "V"
                    }

                    S0VLO {
                        label = "S0VLO"
                        widget = edit
                        type = generic
                        default_value = "-100"
                        nonvisible
                        no_evaluate
                    }

                    S1RHI {
                        label = "S1RHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S1RLO {
                        label = "S1RLO"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S1TSW {
                        label = "S1TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S1VHI {
                        label = "S1VHI"
                        widget = edit
                        type = generic
                        default_value = "100"
                        nonvisible
                        no_evaluate
                    }

                    S1VLO {
                        label = "Minimum high-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.9"
                        unit = "V"
                    }

                    type {
                        label = "type"
                        widget = combo
                        combo_values = "NOR"
                        type = string
                        default_value = "NOR"
                        nonvisible
                        no_evaluate
                    }

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/behavioral_nor.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8056, 8272
                size = 64, 64
            ]

            component Subsystem XOR {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7912, 7992
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7912, 8112
                ]

                port in1 {
                    position = -32.0, -16.0
                    kind = pe
                }
                [
                    position = 7776, 7992
                    hide_name = True
                ]

                port out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8080, 8056
                    hide_name = True
                    scale = -1, 1
                ]

                port in2 {
                    position = -32.0, 16.0
                    kind = pe
                }
                [
                    position = 7776, 8112
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 8000, 8056
                ]

                connect in1 "Short Circuit.p_node" as Connection1
                connect in2 "Short Circuit1.p_node" as Connection3
                connect "Short Circuit.n_node" Junction1 as Connection4
                [
                    position = 0, 0
                    breakpoints = 8000, 7992
                ]
                connect Junction1 out as Connection5
                [
                    position = 0, 0
                    breakpoints = 8000, 8064
                ]
                connect "Short Circuit1.n_node" Junction1 as Connection6

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">XOR logic</p></body></html>"

                    CHI {
                        label = "CHI"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLO {
                        label = "CLO"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLOAD {
                        label = "CLOAD"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    DELAY {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "s"
                        nonvisible
                        no_evaluate
                    }

                    RLOAD {
                        label = "RLOAD"
                        widget = edit
                        type = generic
                        default_value = "1e4"
                        nonvisible
                        no_evaluate
                    }

                    S0RHI {
                        label = "S0RHI"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S0RLO {
                        label = "S0RLO"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0TSW {
                        label = "S0TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S0VHI {
                        label = "Maximum low-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "V"
                    }

                    S0VLO {
                        label = "S0VLO"
                        widget = edit
                        type = generic
                        default_value = "-100"
                        nonvisible
                        no_evaluate
                    }

                    S1RHI {
                        label = "S1RHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S1RLO {
                        label = "S1RLO"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S1TSW {
                        label = "S1TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S1VHI {
                        label = "S1VHI"
                        widget = edit
                        type = generic
                        default_value = "100"
                        nonvisible
                        no_evaluate
                    }

                    S1VLO {
                        label = "Minimum high-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.9"
                        unit = "V"
                    }

                    type {
                        label = "type"
                        widget = combo
                        combo_values = "XOR"
                        type = string
                        default_value = "XOR"
                        nonvisible
                        no_evaluate
                    }

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/behavioral_xor.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 7944, 8368
                size = 64, 64
            ]

            component Subsystem XNOR {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7912, 7992
                ]

                component el_short "Short Circuit1" {
                }
                [
                    position = 7912, 8112
                ]

                port in1 {
                    position = -32.0, -16.0
                    kind = pe
                }
                [
                    position = 7776, 7992
                    hide_name = True
                ]

                port out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8080, 8056
                    hide_name = True
                    scale = -1, 1
                ]

                port in2 {
                    position = -32.0, 16.0
                    kind = pe
                }
                [
                    position = 7776, 8112
                    hide_name = True
                ]

                junction Junction1 pe
                [
                    position = 8000, 8056
                ]

                connect in1 "Short Circuit.p_node" as Connection1
                connect in2 "Short Circuit1.p_node" as Connection3
                connect "Short Circuit.n_node" Junction1 as Connection4
                [
                    position = 0, 0
                    breakpoints = 8000, 7992
                ]
                connect Junction1 out as Connection5
                [
                    position = 0, 0
                    breakpoints = 8000, 8064
                ]
                connect "Short Circuit1.n_node" Junction1 as Connection6

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">XNOR logic</p></body></html>"

                    CHI {
                        label = "CHI"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLO {
                        label = "CLO"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLOAD {
                        label = "CLOAD"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    DELAY {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "s"
                        nonvisible
                        no_evaluate
                    }

                    RLOAD {
                        label = "RLOAD"
                        widget = edit
                        type = generic
                        default_value = "1e4"
                        nonvisible
                        no_evaluate
                    }

                    S0RHI {
                        label = "S0RHI"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S0RLO {
                        label = "S0RLO"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0TSW {
                        label = "S0TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S0VHI {
                        label = "Maximum low-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "V"
                    }

                    S0VLO {
                        label = "S0VLO"
                        widget = edit
                        type = generic
                        default_value = "-100"
                        nonvisible
                        no_evaluate
                    }

                    S1RHI {
                        label = "S1RHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S1RLO {
                        label = "S1RLO"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S1TSW {
                        label = "S1TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S1VHI {
                        label = "S1VHI"
                        widget = edit
                        type = generic
                        default_value = "100"
                        nonvisible
                        no_evaluate
                    }

                    S1VLO {
                        label = "Minimum high-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.9"
                        unit = "V"
                    }

                    type {
                        label = "type"
                        widget = combo
                        combo_values = "NXOR"
                        type = string
                        default_value = "NXOR"
                        nonvisible
                        no_evaluate
                    }

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/behavioral_xnor.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8056, 8368
                size = 64, 64
            ]

            component Subsystem BUFFER {
                layout = static
                component el_short "Short Circuit" {
                }
                [
                    position = 7904, 8064
                ]

                port in {
                    position = left center
                    kind = pe
                }
                [
                    position = 7768, 8064
                    hide_name = True
                ]

                port out {
                    position = right center
                    kind = pe
                }
                [
                    position = 8040, 8064
                    hide_name = True
                    scale = -1, 1
                ]

                connect "Short Circuit.n_node" out as Connection2
                connect in "Short Circuit.p_node" as Connection1

                mask {
                    description = "<html><head><meta name=\"qrichtext\" content=\"1\"></meta><style type=\"text/css\">p, li { white-space: pre-wrap; }</style></head><body style=\"\"><p style=\"margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">BUFFER logic</p></body></html>"

                    CHI {
                        label = "CHI"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLO {
                        label = "CLO"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    CLOAD {
                        label = "CLOAD"
                        widget = edit
                        type = generic
                        default_value = "0"
                        nonvisible
                        no_evaluate
                    }

                    DELAY {
                        label = "Delay"
                        widget = edit
                        type = generic
                        default_value = "0"
                        unit = "s"
                        nonvisible
                        no_evaluate
                    }

                    RLOAD {
                        label = "RLOAD"
                        widget = edit
                        type = generic
                        default_value = "1e4"
                        nonvisible
                        no_evaluate
                    }

                    S0RHI {
                        label = "S0RHI"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S0RLO {
                        label = "S0RLO"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S0TSW {
                        label = "S0TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S0VHI {
                        label = "Maximum low-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        unit = "V"
                    }

                    S0VLO {
                        label = "S0VLO"
                        widget = edit
                        type = generic
                        default_value = "-100"
                        nonvisible
                        no_evaluate
                    }

                    S1RHI {
                        label = "S1RHI"
                        widget = edit
                        type = generic
                        default_value = "0.1"
                        nonvisible
                        no_evaluate
                    }

                    S1RLO {
                        label = "S1RLO"
                        widget = edit
                        type = generic
                        default_value = "1000"
                        nonvisible
                        no_evaluate
                    }

                    S1TSW {
                        label = "S1TSW"
                        widget = edit
                        type = generic
                        default_value = "{GLOBAL_TS*1e-4}"
                        nonvisible
                        no_evaluate
                    }

                    S1VHI {
                        label = "S1VHI"
                        widget = edit
                        type = generic
                        default_value = "100"
                        nonvisible
                        no_evaluate
                    }

                    S1VLO {
                        label = "Minimum high-state input voltage"
                        widget = edit
                        type = generic
                        default_value = "0.9"
                        unit = "V"
                    }

                    type {
                        label = "type"
                        widget = combo
                        combo_values = "BUF"
                        type = string
                        default_value = "BUF"
                        nonvisible
                        no_evaluate
                    }

                    output_voltage {
                        label = "Output Voltage"
                        widget = edit
                        type = generic
                        default_value = "3.3"
                        unit = "V"
                    }

                    CODE open
                        from typhoon.apps.schematic_editor.dialogs.component_property_dialogs.general import RegularComponentPropertiesDialog

                        dialog = RegularComponentPropertiesDialog(
                            component=component,
                            property_container=component.masks[-1],
                            current_diagram=current_diagram
                        )
                        dialog.exec_()

                    ENDCODE

                    CODE define_icon
                        mdl.set_component_icon_image(item_handle, 'Xyce/behavioral_buffer.svg')
                    ENDCODE

                    CODE init
                    ENDCODE
                }
            }
            [
                position = 8056, 8080
                size = 64, 64
            ]
        }
        [
            position = 7872, 8400
            size = 96, 96
        ]

        component Category Measurements {
            layout = dynamic
            component "core/Current Measurement" "Current Measurement" {
            }
            [
                position = 7296, 7904
                size = 64, 32
            ]

            component "core/Voltage Measurement" "Voltage Measurement" {
            }
            [
                position = 7472, 7904
                size = 64, 32
            ]
        }
        [
            position = 8096, 8400
            size = 96, 104
        ]
    }

    default {
    }
}
